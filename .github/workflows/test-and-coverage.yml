name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 6
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'
      - name: Download Lidarr assemblies (plugins Docker)
        shell: bash
        env:
          LIDARR_DOCKER_VERSION: pr-plugins-2.13.3.4692
          LIDARR_DOCKER_DIGEST: sha256:62a6e0e24ffc9ebd86a519303d9f0dff48bf9cdb2899b337cad5c8f20a12c9c7
        run: |
          set -euo pipefail
          mkdir -p ext/Lidarr/_output/net6.0
          IMAGE="ghcr.io/hotio/lidarr:${LIDARR_DOCKER_VERSION}"
          if [ -n "${LIDARR_DOCKER_DIGEST:-}" ]; then IMAGE="ghcr.io/hotio/lidarr@${LIDARR_DOCKER_DIGEST}"; fi
          echo "Using Docker image: ${IMAGE}"
          docker pull "${IMAGE}"
          docker create --name temp-lidarr "${IMAGE}" >/dev/null
          # Copy all runtime dependencies to avoid missing third-party assemblies (e.g., Equ.dll)
          docker cp temp-lidarr:/app/bin/. ext/Lidarr/_output/net6.0/
          docker rm -f temp-lidarr >/dev/null
          echo "Assemblies in target directory:"; ls -la ext/Lidarr/_output/net6.0/

      - name: Verify assemblies present
        shell: bash
        run: |
          set -euo pipefail
          test -f ext/Lidarr/_output/net6.0/Lidarr.Core.dll || { echo "Missing Lidarr.Core.dll in assemblies"; exit 1; }
          ls -la ext/Lidarr/_output/net6.0/
      - name: Set LIDARR_PATH
        run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      - name: Restore
        run: dotnet restore Brainarr.sln
      - name: Build
        run: dotnet build Brainarr.sln --no-restore --configuration Release -p:LidarrPath="${{ env.LIDARR_PATH }}"
      - name: Run unit tests with coverage (fast)
        run: |
          mkdir -p TestResults
          dotnet test Brainarr.sln --no-build --configuration Release \
            --verbosity normal \
            --collect "XPlat Code Coverage" \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory TestResults/ \
            --settings Brainarr.Tests/test.fast.runsettings \
            --filter "(Category=Unit|TestCategory=Unit)&TestCategory!=Performance&TestCategory!=Stress&Category!=Performance&Category!=Stress"
      - name: Enforce coverage threshold (31% lines)
        shell: bash
        run: |
          set -euo pipefail
          COV=$(ls -1t TestResults/**/coverage.cobertura.xml | head -1)
          [ -f "$COV" ] || { echo "Coverage file not found"; exit 1; }
          RATE=$(grep -m1 -oE 'line-rate="([0-9.]+)"' "$COV" | sed -E 's/.*"([0-9.]+)".*/\1/')
          RATE=${RATE:-0}
          PCT=$(awk "BEGIN { printf \"%.2f\", $RATE * 100 }")
          echo "Line coverage: ${PCT}%"
          awk "BEGIN { if ($RATE >= 0.31) exit 0; else exit 1 }"
      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: TestResults/**/coverage.cobertura.xml
