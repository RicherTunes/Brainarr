name: Build and Release Brainarr Plugin

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '6.0.x'
  LIDARR_TARGET_VERSION: '2.13.1.4681'  # Compatible runtime version

jobs:
  build:
    name: Build Plugin
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        configuration: [Release]
    
    outputs:
      plugin-version: ${{ steps.build.outputs.plugin-version }}
      assembly-version: ${{ steps.build.outputs.assembly-version }}
      package-path: ${{ steps.build.outputs.package-path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # For GitVersion
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Tagged release
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "plugin-version=$VERSION" >> $GITHUB_OUTPUT
        else
          # Development build
          VERSION="1.0.0"
          echo "plugin-version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "determined-version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update Lidarr target version if specified
      if: env.LIDARR_OVERRIDE_VERSION != ''
      run: |
        echo "LIDARR_TARGET_VERSION=${{ env.LIDARR_OVERRIDE_VERSION }}" >> $GITHUB_ENV
    
    - name: Build plugin
      id: build
      run: |
        chmod +x ./build-production.ps1
        pwsh -File ./build-production.ps1 \
          -LidarrTargetVersion "${{ env.LIDARR_TARGET_VERSION }}" \
          -PluginVersion "${{ steps.version.outputs.determined-version }}" \
          -BuildNumber "${{ github.run_number }}" \
          -Configuration "${{ matrix.configuration }}" \
          -CI \
          -Package \
          -Verbose
      env:
        GITHUB_ACTIONS: true
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
    
    - name: Test plugin loading
      run: |
        # Basic validation that the plugin DLL was created and can be loaded
        PLUGIN_DLL="./Package/Lidarr.Plugin.Brainarr.dll"
        if [[ -f "$PLUGIN_DLL" ]]; then
          echo "✅ Plugin DLL found: $PLUGIN_DLL"
          echo "File size: $(du -h "$PLUGIN_DLL" | cut -f1)"
          
          # Verify it's a valid .NET assembly
          if file "$PLUGIN_DLL" | grep -q "PE32"; then
            echo "✅ Valid .NET assembly"
          else
            echo "❌ Invalid assembly format"
            exit 1
          fi
        else
          echo "❌ Plugin DLL not found"
          exit 1
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: brainarr-plugin-${{ steps.version.outputs.determined-version }}-${{ github.run_number }}
        path: |
          Package/
          Build/
          *.zip
        retention-days: 30
    
    - name: Upload package for release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-artifact@v3
      with:
        name: release-package
        path: Brainarr-*.zip

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Run tests
      run: |
        dotnet test Brainarr.Tests/Brainarr.Tests.csproj \
          --configuration Release \
          --verbosity normal \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage"
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: TestResults/

  compatibility-test:
    name: Compatibility Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        lidarr-version: 
          - '2.13.1.4681'  # Current working version
          - '2.13.2.4686'  # Latest runtime version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET Core  
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Build with target version
      run: |
        pwsh -File ./build-production.ps1 \
          -LidarrTargetVersion "${{ matrix.lidarr-version }}" \
          -PluginVersion "test" \
          -BuildNumber "compat-${{ github.run_number }}" \
          -Configuration "Release" \
          -CI \
          -Package
      env:
        GITHUB_ACTIONS: true
    
    - name: Upload compatibility test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-test-${{ matrix.lidarr-version }}
        path: Package/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: security-results.sarif
      continue-on-error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release package
      uses: actions/download-artifact@v3
      with:
        name: release-package
        path: release/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get changes since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        # Create release notes
        cat > RELEASE_NOTES.md << EOF
        ## Brainarr Plugin ${{ needs.build.outputs.plugin-version }}
        
        ### Changes
        $CHANGELOG
        
        ### Installation
        1. Stop Lidarr
        2. Extract plugin files to Lidarr plugins directory
        3. Restart Lidarr
        4. Configure in Settings > Import Lists
        
        ### Technical Details
        - Plugin Version: ${{ needs.build.outputs.plugin-version }}
        - Assembly Version: ${{ needs.build.outputs.assembly-version }}
        - Target Lidarr: ${{ env.LIDARR_TARGET_VERSION }}
        - Dependencies: Bundled (ILRepack)
        
        ### Requirements
        - Lidarr v2.13.1 or compatible
        - .NET 6.0 runtime
        - At least one AI provider
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Brainarr v${{ needs.build.outputs.plugin-version }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          release/Brainarr-*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Build Notifications
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.build.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ Brainarr plugin build successful!"
        echo "Version: ${{ needs.build.outputs.plugin-version }}"
        echo "Assembly: ${{ needs.build.outputs.assembly-version }}"
    
    - name: Notify on failure  
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Brainarr plugin build failed!"
        echo "Build: ${{ needs.build.result }}"
        echo "Tests: ${{ needs.test.result }}"
        exit 1