name: CodeQL

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * 0'

jobs:
  analyze:
    name: Analyze (CodeQL)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.SUBMODULES_TOKEN || github.token }}

      - name: Patch submodule NuGet mapping (TagLibSharp-Lidarr)
        shell: bash
        run: |
          set -euo pipefail
          CFG="ext/lidarr.plugin.common/NuGet.config"
          if [ -f "$CFG" ]; then
            echo "Patching $CFG to include TagLibSharp-Lidarr mapping..."
            grep -q 'TagLibSharp-Lidarr' "$CFG" || \
              sed -i '/<packageSource key="lidarr-taglib">/a \      <package pattern="TagLibSharp-Lidarr*" />' "$CFG"
            echo "Done."
          else
            echo "No submodule NuGet.config found at $CFG"
          fi

      - name: Force PAT for submodules
        shell: bash
        env:
          SUBMODULES_TOKEN: ${{ secrets.SUBMODULES_TOKEN }}
        run: |
          if [ -n "${SUBMODULES_TOKEN}" ]; then
            git config --global url."https://x-access-token:${SUBMODULES_TOKEN}@github.com/".insteadOf "https://github.com/"
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Initialize CodeQL (manual build)
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: manual

      - name: Extract Lidarr assemblies (shared script)
        run: timeout 12m bash scripts/extract-lidarr-assemblies.sh --mode minimal --no-tar-fallback --output-dir ext/Lidarr-docker/_output/net6.0
        shell: bash

      - name: Verify assemblies and export LIDARR_PATH
        shell: bash
        run: |
          set -euo pipefail
          bash scripts/ci/check-assemblies.sh ext/Lidarr-docker/_output/net6.0
          echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr-docker/_output/net6.0" >> "$GITHUB_ENV"

      - name: Restore
        run: timeout 10m dotnet restore Brainarr.sln

      - name: Build
        run: timeout 20m dotnet build Brainarr.sln -c Release --no-restore -p:LidarrPath="${{ env.LIDARR_PATH }}" -m:1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
