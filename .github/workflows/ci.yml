name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  # 🧪 Test Job - Runs unit tests and integration tests
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x', '7.0.x', '8.0.x']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for GitVersion
        
    - name: 🔧 Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: 🔄 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: 🧪 Run unit tests
      run: |
        dotnet test \
          --no-build \
          --configuration Release \
          --logger trx \
          --results-directory "TestResults-${{ matrix.dotnet-version }}" \
          --collect:"XPlat Code Coverage" \
          --filter "Category!=Integration"
          
    - name: 🔗 Run integration tests (if applicable)
      run: |
        dotnet test \
          --no-build \
          --configuration Release \
          --logger trx \
          --results-directory "TestResults-Integration-${{ matrix.dotnet-version }}" \
          --filter "Category=Integration"
      continue-on-error: true # Integration tests may fail without external dependencies
      
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.dotnet-version }}
        path: TestResults-*/**/*
        
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.dotnet-version == '6.0.x' # Only upload once
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: TestResults-${{ matrix.dotnet-version }}
        fail_ci_if_error: false

  # 🔍 Code Quality Job - Linting, formatting, and analysis
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: 🔄 Restore dependencies
      run: dotnet restore
      
    - name: 🎨 Check code formatting
      run: dotnet format --verify-no-changes --no-restore
      
    - name: 🔍 Run code analysis
      run: dotnet build --configuration Release --verbosity normal /p:TreatWarningsAsErrors=true
      
    - name: 📋 Run additional analyzers
      run: |
        # Install security analyzers
        dotnet add package Microsoft.CodeAnalysis.NetAnalyzers
        dotnet add package SecurityCodeScan.VS2019
        dotnet build --configuration Release

  # 🏗️ Build Job - Creates release artifacts
  build:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        
    - name: 🔄 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build plugin
      run: |
        dotnet build Brainarr.Plugin/Brainarr.Plugin.csproj \
          --configuration Release \
          --no-restore \
          --output "build-output"
          
    - name: 📦 Create plugin package
      run: |
        # Create the plugin directory structure
        mkdir -p "Brainarr-Plugin"
        
        # Copy main plugin files
        cp build-output/Lidarr.Plugin.Brainarr.dll Brainarr-Plugin/
        cp build-output/plugin.json Brainarr-Plugin/ 2>/dev/null || cp plugin.json Brainarr-Plugin/
        
        # Copy dependencies (excluding Lidarr assemblies)
        cp build-output/NLog.dll Brainarr-Plugin/ 2>/dev/null || true
        cp build-output/Newtonsoft.Json.dll Brainarr-Plugin/ 2>/dev/null || true
        cp build-output/FluentValidation.dll Brainarr-Plugin/ 2>/dev/null || true
        
        # Create installation instructions
        cat > Brainarr-Plugin/INSTALL.txt << 'EOF'
        Brainarr Plugin Installation Instructions
        =======================================
        
        1. Copy all files to your Lidarr plugins directory:
           - Windows: C:\ProgramData\Lidarr\plugins\Brainarr\
           - Linux: /var/lib/lidarr/plugins/Brainarr/
           - Docker: /config/plugins/Brainarr/
           
        2. Restart Lidarr
        
        3. Go to Settings → Import Lists → Add → Brainarr
        
        For detailed setup instructions, visit:
        https://github.com/yourusername/brainarr/blob/main/QUICKSTART.md
        EOF
        
        # Create version info
        echo "Version: $(cat plugin.json | grep -o '"version": "[^"]*' | cut -d'"' -f4)" > Brainarr-Plugin/VERSION.txt
        echo "Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> Brainarr-Plugin/VERSION.txt
        echo "Git Commit: ${GITHUB_SHA:0:8}" >> Brainarr-Plugin/VERSION.txt
        
    - name: 🗜️ Create release archive
      run: |
        cd Brainarr-Plugin
        zip -r "../Brainarr-v$(cat plugin.json | grep -o '"version": "[^"]*' | cut -d'"' -f4).zip" .
        cd ..
        
        # Create checksums
        sha256sum *.zip > checksums.txt
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: brainarr-plugin
        path: |
          Brainarr-v*.zip
          checksums.txt

  # 🔒 Security Scan Job - Security vulnerability scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: 🔄 Restore dependencies
      run: dotnet restore
      
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: 🏗️ Autobuild for CodeQL
      uses: github/codeql-action/autobuild@v3
      
    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # 🧪 Compatibility Test Job - Test against different Lidarr versions
  compatibility:
    name: 🧪 Compatibility Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        lidarr-version: ['4.0.0', '4.1.0', 'latest']
      fail-fast: false
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: 🔄 Restore dependencies
      run: dotnet restore
      
    - name: 🏗️ Build plugin
      run: dotnet build --configuration Release
      
    - name: 🧪 Test compatibility
      run: |
        echo "Testing compatibility with Lidarr ${{ matrix.lidarr-version }}"
        # Run compatibility tests
        dotnet test --configuration Release --filter "Category=Compatibility" || echo "No compatibility tests found"
        
    - name: 📝 Report compatibility results
      if: always()
      run: |
        echo "Compatibility test for Lidarr ${{ matrix.lidarr-version }}: ${{ job.status }}"

  # 📋 Report Job - Aggregate results and notifications
  report:
    name: 📋 Test Report
    runs-on: ubuntu-latest
    needs: [test, code-quality, build, security, compatibility]
    if: always()
    
    steps:
    - name: 📊 Generate summary report
      run: |
        echo "# 📋 CI/CD Pipeline Summary" > summary.md
        echo "" >> summary.md
        echo "## 🧪 Test Results" >> summary.md
        echo "- Unit Tests: ${{ needs.test.result }}" >> summary.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> summary.md
        echo "- Security Scan: ${{ needs.security.result }}" >> summary.md
        echo "- Compatibility: ${{ needs.compatibility.result }}" >> summary.md
        echo "- Build: ${{ needs.build.result }}" >> summary.md
        echo "" >> summary.md
        echo "## 📈 Metrics" >> summary.md
        echo "- Build Time: $(date)" >> summary.md
        echo "- Commit: ${GITHUB_SHA:0:8}" >> summary.md
        echo "- Branch: ${GITHUB_REF#refs/heads/}" >> summary.md
        
    - name: 📤 Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: pipeline-summary
        path: summary.md