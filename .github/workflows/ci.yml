name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test & Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['6.0.x', '8.0.x']
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Download Lidarr Assemblies  
      run: |
        echo "Downloading Lidarr assemblies..."
        mkdir -p ext/Lidarr/_output/net6.0
        
        # Use the actual latest stable version
        LIDARR_URL="https://github.com/Lidarr/Lidarr/releases/download/v2.12.4.4658/Lidarr.master.2.12.4.4658.linux-core-x64.tar.gz"
        echo "Downloading from: $LIDARR_URL"
        
        curl -L --retry 3 "$LIDARR_URL" -o lidarr.tar.gz
        
        if [ ! -f "lidarr.tar.gz" ]; then
          echo "Download failed"
          exit 1
        fi
        
        echo "Archive size: $(ls -lh lidarr.tar.gz)"
        tar -xzf lidarr.tar.gz
        
        if [ -d "Lidarr" ]; then
          echo "Contents of Lidarr directory:"
          ls -la Lidarr/ | head -10
          
          # Copy core Lidarr assemblies with error checking
          echo "Copying core Lidarr assemblies..."
          cp Lidarr/Lidarr.Core.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Common.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Http.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Api.V1.dll ext/Lidarr/_output/net6.0/
          
          # Copy Microsoft.Extensions assemblies with error checking
          echo "Copying Microsoft.Extensions assemblies..."
          if [ -f "Lidarr/Microsoft.Extensions.Caching.Memory.dll" ]; then
            cp Lidarr/Microsoft.Extensions.Caching.Memory.dll ext/Lidarr/_output/net6.0/
            echo "✓ Microsoft.Extensions.Caching.Memory.dll"
          else
            echo "✗ Microsoft.Extensions.Caching.Memory.dll not found"
            exit 1
          fi
          
          if [ -f "Lidarr/Microsoft.Extensions.Caching.Abstractions.dll" ]; then
            cp Lidarr/Microsoft.Extensions.Caching.Abstractions.dll ext/Lidarr/_output/net6.0/
            echo "✓ Microsoft.Extensions.Caching.Abstractions.dll"
          else
            echo "✗ Microsoft.Extensions.Caching.Abstractions.dll not found"
            exit 1
          fi
          
          if [ -f "Lidarr/Microsoft.Extensions.DependencyInjection.Abstractions.dll" ]; then
            cp Lidarr/Microsoft.Extensions.DependencyInjection.Abstractions.dll ext/Lidarr/_output/net6.0/
            echo "✓ Microsoft.Extensions.DependencyInjection.Abstractions.dll"
          else
            echo "✗ Microsoft.Extensions.DependencyInjection.Abstractions.dll not found"
            exit 1
          fi
          
          if [ -f "Lidarr/Microsoft.Extensions.Logging.Abstractions.dll" ]; then
            cp Lidarr/Microsoft.Extensions.Logging.Abstractions.dll ext/Lidarr/_output/net6.0/
            echo "✓ Microsoft.Extensions.Logging.Abstractions.dll"
          else
            echo "✗ Microsoft.Extensions.Logging.Abstractions.dll not found"
            # This one might not exist, so don't fail
            echo "Continuing without Microsoft.Extensions.Logging.Abstractions.dll"
          fi
          
          if [ -f "Lidarr/Microsoft.Extensions.Options.dll" ]; then
            cp Lidarr/Microsoft.Extensions.Options.dll ext/Lidarr/_output/net6.0/
            echo "✓ Microsoft.Extensions.Options.dll"
          else
            echo "✗ Microsoft.Extensions.Options.dll not found"
            exit 1
          fi
          
          if [ -f "Lidarr/Microsoft.Extensions.Primitives.dll" ]; then
            cp Lidarr/Microsoft.Extensions.Primitives.dll ext/Lidarr/_output/net6.0/
            echo "✓ Microsoft.Extensions.Primitives.dll"
          else
            echo "✗ Microsoft.Extensions.Primitives.dll not found"
            exit 1
          fi
          
          # Copy optional assemblies if they exist
          if [ -f "Lidarr/Lidarr.Host.dll" ]; then
            cp Lidarr/Lidarr.Host.dll ext/Lidarr/_output/net6.0/
            echo "✓ Lidarr.Host.dll"
          else
            echo "Lidarr.Host.dll not found (optional)"
          fi
          
          echo "Final assemblies in target directory:"
          ls -la ext/Lidarr/_output/net6.0/
          
          echo "Core and Microsoft.Extensions assemblies copied successfully"
        else
          echo "Extraction failed - Lidarr directory not found"
          echo "Contents of current directory:"
          ls -la
          exit 1
        fi
        
        rm -f lidarr.tar.gz
      shell: bash
      
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      shell: bash
      
    - name: Restore dependencies
      run: dotnet restore Brainarr.sln
      
    - name: Build
      run: dotnet build Brainarr.sln --no-restore --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
      
    - name: Test
      continue-on-error: true
      run: |
        echo "Running tests with better error handling..."
        mkdir -p TestResults
        dotnet test Brainarr.sln --no-build --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=test-results.trx" \
          --results-directory TestResults/ \
          --blame-hang-timeout 5m
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
        path: TestResults/
        if-no-files-found: warn
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.dotnet-version == '6.0.x'
      with:
        file: TestResults/*/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Download Lidarr Assemblies
      run: |
        echo "Downloading Lidarr assemblies for security scan..."
        mkdir -p ext/Lidarr/_output/net6.0
        
        LIDARR_URL="https://github.com/Lidarr/Lidarr/releases/download/v2.12.4.4658/Lidarr.master.2.12.4.4658.linux-core-x64.tar.gz"
        curl -L --retry 3 "$LIDARR_URL" -o lidarr.tar.gz
        
        if [ ! -f "lidarr.tar.gz" ]; then
          echo "Download failed"
          exit 1
        fi
        
        tar -xzf lidarr.tar.gz
        
        if [ -d "Lidarr" ]; then
          # Copy core Lidarr assemblies
          cp Lidarr/Lidarr.Core.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Common.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Http.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Api.V1.dll ext/Lidarr/_output/net6.0/
          
          # Copy Microsoft.Extensions assemblies with checks
          [ -f "Lidarr/Microsoft.Extensions.Caching.Memory.dll" ] && cp Lidarr/Microsoft.Extensions.Caching.Memory.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Caching.Abstractions.dll" ] && cp Lidarr/Microsoft.Extensions.Caching.Abstractions.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.DependencyInjection.Abstractions.dll" ] && cp Lidarr/Microsoft.Extensions.DependencyInjection.Abstractions.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Logging.Abstractions.dll" ] && cp Lidarr/Microsoft.Extensions.Logging.Abstractions.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Options.dll" ] && cp Lidarr/Microsoft.Extensions.Options.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Primitives.dll" ] && cp Lidarr/Microsoft.Extensions.Primitives.dll ext/Lidarr/_output/net6.0/
          
          # Copy optional assemblies if they exist
          [ -f "Lidarr/Lidarr.Host.dll" ] && cp Lidarr/Lidarr.Host.dll ext/Lidarr/_output/net6.0/
          
          echo "Assemblies ready for security scan"
        else
          echo "Extraction failed"
          exit 1
        fi
        
        rm -f lidarr.tar.gz
        
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      
    - name: Build for Analysis
      run: |
        dotnet restore Brainarr.sln
        dotnet build Brainarr.sln --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  build-plugin:
    name: Build Plugin Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Download Lidarr Assemblies
      run: |
        echo "Downloading Lidarr assemblies for release build..."
        mkdir -p ext/Lidarr/_output/net6.0
        
        LIDARR_URL="https://github.com/Lidarr/Lidarr/releases/download/v2.12.4.4658/Lidarr.master.2.12.4.4658.linux-core-x64.tar.gz"
        curl -L --retry 3 "$LIDARR_URL" -o lidarr.tar.gz
        
        if [ ! -f "lidarr.tar.gz" ]; then
          echo "Download failed"
          exit 1
        fi
        
        tar -xzf lidarr.tar.gz
        
        if [ -d "Lidarr" ]; then
          # Copy core Lidarr assemblies
          cp Lidarr/Lidarr.Core.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Common.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Http.dll ext/Lidarr/_output/net6.0/
          cp Lidarr/Lidarr.Api.V1.dll ext/Lidarr/_output/net6.0/
          
          # Copy Microsoft.Extensions assemblies with checks
          [ -f "Lidarr/Microsoft.Extensions.Caching.Memory.dll" ] && cp Lidarr/Microsoft.Extensions.Caching.Memory.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Caching.Abstractions.dll" ] && cp Lidarr/Microsoft.Extensions.Caching.Abstractions.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.DependencyInjection.Abstractions.dll" ] && cp Lidarr/Microsoft.Extensions.DependencyInjection.Abstractions.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Logging.Abstractions.dll" ] && cp Lidarr/Microsoft.Extensions.Logging.Abstractions.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Options.dll" ] && cp Lidarr/Microsoft.Extensions.Options.dll ext/Lidarr/_output/net6.0/
          [ -f "Lidarr/Microsoft.Extensions.Primitives.dll" ] && cp Lidarr/Microsoft.Extensions.Primitives.dll ext/Lidarr/_output/net6.0/
          
          # Copy optional assemblies if they exist
          [ -f "Lidarr/Lidarr.Host.dll" ] && cp Lidarr/Lidarr.Host.dll ext/Lidarr/_output/net6.0/
          
          echo "Assemblies ready for release build"
        else
          echo "Extraction failed"
          exit 1
        fi
        
        rm -f lidarr.tar.gz
        
    - name: Build Plugin
      run: |
        dotnet restore Brainarr.sln
        dotnet build Brainarr.sln --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
        
    - name: Create Release Package
      run: |
        mkdir -p release
        cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll release/
        cp plugin.json release/
        cp README.md release/
        cp LICENSE release/
        cd release
        zip -r ../Brainarr-${{ github.event.release.tag_name }}.zip .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Brainarr-${{ github.event.release.tag_name }}.zip
        asset_name: Brainarr-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip