name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test & Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['6.0.x', '8.0.x']
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Download Lidarr Assemblies  
      run: |
        echo "Downloading Lidarr assemblies from latest release..."
        echo "OS: ${{ matrix.os }}, .NET: ${{ matrix.dotnet-version }}"
        echo "Working directory: $(pwd)"
        
        # Create target directory
        mkdir -p ext/Lidarr/_output/net6.0
        echo "Created target directory: ext/Lidarr/_output/net6.0"
        
        # Get the actual latest release download URL with better error handling
        echo "Fetching latest Lidarr release info..."
        RELEASE_JSON=$(curl -sSL --max-time 30 https://api.github.com/repos/Lidarr/Lidarr/releases/latest 2>/dev/null)
        
        if [ $? -eq 0 ] && [ -n "$RELEASE_JSON" ]; then
          LIDARR_URL=$(echo "$RELEASE_JSON" | grep "browser_download_url.*linux-core-x64.tar.gz" | cut -d '"' -f 4 | head -1)
          echo "Found latest release URL: $LIDARR_URL"
        else
          echo "Failed to fetch latest release, using fallback"
          LIDARR_URL=""
        fi
        
        # Download with fallback strategy
        if [ -n "$LIDARR_URL" ]; then
          echo "Downloading from latest release: $LIDARR_URL"
          curl -sSL --max-time 120 --retry 3 "$LIDARR_URL" -o lidarr.tar.gz
          DOWNLOAD_STATUS=$?
        else
          echo "Using fallback URL..."
          FALLBACK_URL="https://github.com/Lidarr/Lidarr/releases/download/v2.13.1.4681/Lidarr.main.2.13.1.4681.linux-core-x64.tar.gz"
          curl -sSL --max-time 120 --retry 3 "$FALLBACK_URL" -o lidarr.tar.gz
          DOWNLOAD_STATUS=$?
        fi
        
        # Verify download
        if [ $DOWNLOAD_STATUS -ne 0 ]; then
          echo "Download failed with status: $DOWNLOAD_STATUS"
          exit 1
        fi
        
        if [ ! -f "lidarr.tar.gz" ]; then
          echo "Downloaded file not found"
          exit 1
        fi
        
        FILESIZE=$(ls -la lidarr.tar.gz | awk '{print $5}')
        echo "Downloaded file size: $FILESIZE bytes"
        
        if [ "$FILESIZE" -lt 1000000 ]; then
          echo "Downloaded file too small, likely corrupted"
          exit 1
        fi
        
        # Extract with verification
        echo "Extracting Lidarr archive..."
        tar -xzf lidarr.tar.gz
        EXTRACT_STATUS=$?
        
        if [ $EXTRACT_STATUS -ne 0 ]; then
          echo "Failed to extract archive with status: $EXTRACT_STATUS"
          exit 1
        fi
        
        # List contents to debug extraction
        echo "Archive contents:"
        ls -la
        
        # Check for Lidarr directory
        if [ -d "Lidarr" ]; then
          echo "Found Lidarr directory"
          echo "Lidarr directory contents:"
          ls -la Lidarr/ | head -20
          
          # Copy assemblies with better error handling
          echo "Copying required assemblies..."
          COPIED_COUNT=0
          
          for dll in "Lidarr.Core.dll" "Lidarr.Common.dll" "Lidarr.Http.dll" "Lidarr.Api.V1.dll"; do
            if [ -f "Lidarr/$dll" ]; then
              cp "Lidarr/$dll" ext/Lidarr/_output/net6.0/
              echo "Copied: $dll"
              COPIED_COUNT=$((COPIED_COUNT + 1))
            else
              echo "Not found: $dll"
            fi
          done
          
          if [ $COPIED_COUNT -eq 0 ]; then
            echo "No required assemblies found"
            exit 1
          fi
          
          echo "Successfully copied $COPIED_COUNT assemblies"
          echo "Final assembly directory:"
          ls -la ext/Lidarr/_output/net6.0/
          
        else
          echo "Lidarr directory not found after extraction"
          echo "Available directories:"
          ls -la
          exit 1
        fi
        
        # Cleanup
        rm -f lidarr.tar.gz
        echo "Lidarr assemblies downloaded and prepared successfully"
      shell: bash
      
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      shell: bash
      
    - name: Restore dependencies
      run: dotnet restore Brainarr.sln
      
    - name: Build
      run: dotnet build Brainarr.sln --no-restore --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
      
    - name: Test
      continue-on-error: true
      run: |
        echo "Running tests with better error handling..."
        mkdir -p TestResults
        dotnet test Brainarr.sln --no-build --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger "trx;LogFileName=test-results.trx" \
          --results-directory TestResults/ \
          --blame-hang-timeout 5m
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
        path: TestResults/
        if-no-files-found: warn
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.dotnet-version == '6.0.x'
      with:
        file: TestResults/*/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Download Lidarr Assemblies
      run: |
        echo "Downloading Lidarr assemblies for security scan..."
        mkdir -p ext/Lidarr/_output/net6.0
        
        # Get the actual latest release download URL with better error handling
        RELEASE_JSON=$(curl -sSL --max-time 30 https://api.github.com/repos/Lidarr/Lidarr/releases/latest 2>/dev/null)
        
        if [ $? -eq 0 ] && [ -n "$RELEASE_JSON" ]; then
          LIDARR_URL=$(echo "$RELEASE_JSON" | grep "browser_download_url.*linux-core-x64.tar.gz" | cut -d '"' -f 4 | head -1)
          echo "Found latest release URL: $LIDARR_URL"
        else
          echo "Failed to fetch latest release, using fallback"
          LIDARR_URL=""
        fi
        
        # Download with fallback strategy
        if [ -n "$LIDARR_URL" ]; then
          echo "Downloading from latest release..."
          curl -sSL --max-time 120 --retry 3 "$LIDARR_URL" -o lidarr.tar.gz
          DOWNLOAD_STATUS=$?
        else
          echo "Using fallback URL..."
          curl -sSL --max-time 120 --retry 3 "https://github.com/Lidarr/Lidarr/releases/download/v2.13.1.4681/Lidarr.main.2.13.1.4681.linux-core-x64.tar.gz" -o lidarr.tar.gz
          DOWNLOAD_STATUS=$?
        fi
        
        if [ $DOWNLOAD_STATUS -ne 0 ] || [ ! -f "lidarr.tar.gz" ]; then
          echo "Failed to download Lidarr assemblies"
          exit 1
        fi
        
        # Extract and copy assemblies
        tar -xzf lidarr.tar.gz
        if [ -d "Lidarr" ]; then
          cp Lidarr/Lidarr.Core.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Core.dll not found"
          cp Lidarr/Lidarr.Common.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Common.dll not found"
          cp Lidarr/Lidarr.Http.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Http.dll not found"
          cp Lidarr/Lidarr.Api.V1.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Api.V1.dll not found"
          rm -f lidarr.tar.gz
          echo "Assemblies ready for security scan"
        else
          echo "Failed to extract Lidarr archive"
          exit 1
        fi
        
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      
    - name: Build for Analysis
      run: |
        dotnet restore Brainarr.sln
        dotnet build Brainarr.sln --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  build-plugin:
    name: Build Plugin Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Download Lidarr Assemblies
      run: |
        echo "Downloading Lidarr assemblies for release build..."
        mkdir -p ext/Lidarr/_output/net6.0
        
        # Get the actual latest release download URL with better error handling
        RELEASE_JSON=$(curl -sSL --max-time 30 https://api.github.com/repos/Lidarr/Lidarr/releases/latest 2>/dev/null)
        
        if [ $? -eq 0 ] && [ -n "$RELEASE_JSON" ]; then
          LIDARR_URL=$(echo "$RELEASE_JSON" | grep "browser_download_url.*linux-core-x64.tar.gz" | cut -d '"' -f 4 | head -1)
        else
          LIDARR_URL=""
        fi
        
        # Download with fallback strategy
        if [ -n "$LIDARR_URL" ]; then
          curl -sSL --max-time 120 --retry 3 "$LIDARR_URL" -o lidarr.tar.gz
          DOWNLOAD_STATUS=$?
        else
          curl -sSL --max-time 120 --retry 3 "https://github.com/Lidarr/Lidarr/releases/download/v2.13.1.4681/Lidarr.main.2.13.1.4681.linux-core-x64.tar.gz" -o lidarr.tar.gz
          DOWNLOAD_STATUS=$?
        fi
        
        if [ $DOWNLOAD_STATUS -ne 0 ] || [ ! -f "lidarr.tar.gz" ]; then
          echo "Failed to download Lidarr assemblies"
          exit 1
        fi
        
        # Extract and copy assemblies
        tar -xzf lidarr.tar.gz
        if [ -d "Lidarr" ]; then
          cp Lidarr/Lidarr.Core.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Core.dll not found"
          cp Lidarr/Lidarr.Common.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Common.dll not found"
          cp Lidarr/Lidarr.Http.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Http.dll not found"
          cp Lidarr/Lidarr.Api.V1.dll ext/Lidarr/_output/net6.0/ 2>/dev/null || echo "Lidarr.Api.V1.dll not found"
          rm -f lidarr.tar.gz
          echo "Assemblies ready for release build"
        else
          echo "Failed to extract Lidarr archive"
          exit 1
        fi
        
    - name: Build Plugin
      run: |
        dotnet restore Brainarr.sln
        dotnet build Brainarr.sln --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
        
    - name: Create Release Package
      run: |
        mkdir -p release
        cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll release/
        cp plugin.json release/
        cp README.md release/
        cp LICENSE release/
        cd release
        zip -r ../Brainarr-${{ github.event.release.tag_name }}.zip .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Brainarr-${{ github.event.release.tag_name }}.zip
        asset_name: Brainarr-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip