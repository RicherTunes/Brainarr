name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test & Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['6.0.x', '8.0.x']
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Setup Lidarr Dependencies
      run: |
        echo "Checking Lidarr submodule status..."
        git submodule status
        
        echo "Checking if Lidarr assemblies exist..."
        if [ ! -d "ext/Lidarr/_output/net6.0" ] || [ -z "$(ls -A ext/Lidarr/_output/net6.0 2>/dev/null || echo '')" ]; then
          echo "Lidarr assemblies not found. Building from source..."
          cd ext/Lidarr
          
          echo "Setting up build environment..."
          ls -la
          
          # Install yarn if not available
          if ! command -v yarn &> /dev/null; then
            echo "Installing yarn..."
            npm install -g yarn
          fi
          
          echo "Running Lidarr backend build..."
          chmod +x build.sh
          ./build.sh --backend --no-tests || {
            echo "ERROR: Lidarr build failed. Trying alternative build method..."
            
            # Alternative: Build just the backend components we need
            echo "Building minimal Lidarr components..."
            dotnet restore src/Lidarr.sln
            dotnet build src/Lidarr.sln --configuration Release --no-restore
            
            # Copy built assemblies to expected location
            mkdir -p _output/net6.0
            find . -name "*.dll" -path "*/bin/Release/net6.0/*" -exec cp {} _output/net6.0/ \;
          }
          cd ../..
        else
          echo "Using existing Lidarr assemblies from repository"
        fi
        
        echo "Verifying Lidarr assemblies..."
        if [ -d "ext/Lidarr/_output/net6.0" ]; then
          ls -la ext/Lidarr/_output/net6.0/ | head -10
          echo "Found $(ls ext/Lidarr/_output/net6.0/*.dll 2>/dev/null | wc -l) DLL files"
        else
          echo "ERROR: Lidarr assemblies directory not found!"
          exit 1
        fi
      shell: bash
      
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      shell: bash
      
    - name: Restore dependencies
      run: dotnet restore Brainarr.sln
      
    - name: Build
      run: dotnet build Brainarr.sln --no-restore --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
      
    - name: Test
      run: dotnet test Brainarr.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
        path: TestResults/
        if-no-files-found: warn
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.dotnet-version == '6.0.x'
      with:
        file: TestResults/*/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  build-plugin:
    name: Build Plugin Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Lidarr Dependencies
      run: |
        echo "Checking Lidarr submodule status..."
        git submodule status
        
        echo "Checking if Lidarr assemblies exist..."
        if [ ! -d "ext/Lidarr/_output/net6.0" ] || [ -z "$(ls -A ext/Lidarr/_output/net6.0 2>/dev/null || echo '')" ]; then
          echo "Lidarr assemblies not found. Building from source..."
          cd ext/Lidarr
          
          echo "Setting up build environment..."
          ls -la
          
          # Install yarn if not available
          if ! command -v yarn &> /dev/null; then
            echo "Installing yarn..."
            npm install -g yarn
          fi
          
          echo "Running Lidarr backend build..."
          chmod +x build.sh
          ./build.sh --backend --no-tests || {
            echo "ERROR: Lidarr build failed. Trying alternative build method..."
            
            # Alternative: Build just the backend components we need
            echo "Building minimal Lidarr components..."
            dotnet restore src/Lidarr.sln
            dotnet build src/Lidarr.sln --configuration Release --no-restore
            
            # Copy built assemblies to expected location
            mkdir -p _output/net6.0
            find . -name "*.dll" -path "*/bin/Release/net6.0/*" -exec cp {} _output/net6.0/ \;
          }
          cd ../..
        else
          echo "Using existing Lidarr assemblies from repository"
        fi
        
        echo "Verifying Lidarr assemblies..."
        if [ -d "ext/Lidarr/_output/net6.0" ]; then
          ls -la ext/Lidarr/_output/net6.0/ | head -10
          echo "Found $(ls ext/Lidarr/_output/net6.0/*.dll 2>/dev/null | wc -l) DLL files"
        else
          echo "ERROR: Lidarr assemblies directory not found!"
          exit 1
        fi
        
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      
    - name: Build Plugin
      run: |
        dotnet restore Brainarr.Plugin/
        dotnet build Brainarr.Plugin/ --configuration Release --no-restore -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
        
    - name: Package Plugin
      run: |
        mkdir -p release
        cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll release/
        cp plugin.json release/
        cp README.md release/
        cp LICENSE release/
        cd release
        zip -r ../Brainarr-${{ github.event.release.tag_name }}.zip .
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./Brainarr-${{ github.event.release.tag_name }}.zip
        asset_name: Brainarr-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Lidarr Dependencies
      run: |
        echo "Checking Lidarr submodule status..."
        git submodule status
        
        echo "Checking if Lidarr assemblies exist..."
        if [ ! -d "ext/Lidarr/_output/net6.0" ] || [ -z "$(ls -A ext/Lidarr/_output/net6.0 2>/dev/null || echo '')" ]; then
          echo "Lidarr assemblies not found. Building from source..."
          cd ext/Lidarr
          
          echo "Setting up build environment..."
          ls -la
          
          # Install yarn if not available
          if ! command -v yarn &> /dev/null; then
            echo "Installing yarn..."
            npm install -g yarn
          fi
          
          echo "Running Lidarr backend build..."
          chmod +x build.sh
          ./build.sh --backend --no-tests || {
            echo "ERROR: Lidarr build failed. Trying alternative build method..."
            
            # Alternative: Build just the backend components we need
            echo "Building minimal Lidarr components..."
            dotnet restore src/Lidarr.sln
            dotnet build src/Lidarr.sln --configuration Release --no-restore
            
            # Copy built assemblies to expected location
            mkdir -p _output/net6.0
            find . -name "*.dll" -path "*/bin/Release/net6.0/*" -exec cp {} _output/net6.0/ \;
          }
          cd ../..
        else
          echo "Using existing Lidarr assemblies from repository"
        fi
        
        echo "Verifying Lidarr assemblies..."
        if [ -d "ext/Lidarr/_output/net6.0" ]; then
          ls -la ext/Lidarr/_output/net6.0/ | head -10
          echo "Found $(ls ext/Lidarr/_output/net6.0/*.dll 2>/dev/null | wc -l) DLL files"
        else
          echo "ERROR: Lidarr assemblies directory not found!"
          exit 1
        fi
        
    - name: Set Lidarr Path
      run: echo "LIDARR_PATH=${{ github.workspace }}/ext/Lidarr/_output/net6.0" >> $GITHUB_ENV
      
    - name: Build for Analysis
      run: |
        dotnet restore Brainarr.sln
        dotnet build Brainarr.sln --configuration Release -p:LidarrPath="${{ github.workspace }}/ext/Lidarr/_output/net6.0"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3