name: 🚀 Automated Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-alpha.*'
      - 'v*.*.*-beta.*'
      - 'v*.*.*-rc.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.0 or v1.2.0-beta.1)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.x'
  LIDARR_DOCKER_VERSION: 'pr-plugins-2.13.3.4692'

permissions:
  contents: write  # Required for creating releases

jobs:
  create-release:
    name: 🎁 Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Extract Lidarr assemblies from Docker for release
      run: |
        echo "🐳 Extracting Lidarr assemblies for release from plugins branch..."
        
        # Use plugins branch Docker image (same as CI)  
        LIDARR_DOCKER_VERSION="pr-plugins-2.13.3.4692"
        
        # Pull plugins branch Docker image
        docker pull ghcr.io/hotio/lidarr:$LIDARR_DOCKER_VERSION
        docker create --name temp-lidarr ghcr.io/hotio/lidarr:$LIDARR_DOCKER_VERSION
        
        # Create output directory
        mkdir -p ext/Lidarr-docker/_output/net6.0
        
        # Extract required assemblies
        docker cp temp-lidarr:/app/bin/Lidarr.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Common.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Core.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Http.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Api.V1.dll ext/Lidarr-docker/_output/net6.0/
        
        # Cleanup Docker container
        docker rm temp-lidarr
        
        echo "✅ Lidarr assemblies extracted successfully"
      
    - name: 🏷️ Determine Version & Metadata  
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract semantic version parts
        VERSION_NUM="${VERSION#v}"
        echo "version_num=$VERSION_NUM" >> $GITHUB_OUTPUT
        
        # Determine if prerelease
        if [[ "$VERSION" =~ -alpha|-beta|-rc ]]; then
          echo "prerelease=true" >> $GITHUB_OUTPUT
          echo "🧪 Detected prerelease version: $VERSION"
        else
          echo "prerelease=false" >> $GITHUB_OUTPUT
          echo "🎉 Detected stable release version: $VERSION"
        fi
        
        # Find previous tag for changelog generation
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        echo "📋 Previous version: $PREVIOUS_TAG"
        
    - name: 🔄 Update Version in Project Files
      run: |
        VERSION_NUM="${{ steps.version.outputs.version_num }}"
        echo "📝 Updating version to $VERSION_NUM in project files..."
        
        # Update plugin.json
        sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NUM\"/" plugin.json
        echo "✅ Updated plugin.json"
        
        # Update .csproj files if they exist with version properties
        find . -name "*.csproj" -exec grep -l "AssemblyVersion\|FileVersion\|AssemblyInformationalVersion" {} \; | while read file; do
          sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION_NUM.0<\/AssemblyVersion>/" "$file"
          sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION_NUM.0<\/FileVersion>/" "$file"
          sed -i "s/<AssemblyInformationalVersion>.*<\/AssemblyInformationalVersion>/<AssemblyInformationalVersion>$VERSION_NUM<\/AssemblyInformationalVersion>/" "$file"
          echo "✅ Updated $file"
        done
        
        echo "🎯 Version update completed"
        
    - name: 🔨 Build Plugin
      run: |
        echo "🔧 Building Brainarr plugin..."
        
        # Check what assemblies we actually extracted
        echo "📋 Available Lidarr assemblies:"
        ls -la ext/Lidarr-docker/_output/net6.0/
        
        # Restore packages first
        dotnet restore Brainarr.sln
        
        # Build with Docker assemblies + NuGet packages (Microsoft.Extensions now via Central Package Management)
        echo "🎯 Building with Docker assemblies + NuGet packages..."
        dotnet build Brainarr.sln --configuration Release --no-restore -p:LidarrPath="${{ github.workspace }}/ext/Lidarr-docker/_output/net6.0"
        
        echo "✅ Plugin build completed"
        
    - name: 🧪 Run Tests
      continue-on-error: true
      timeout-minutes: 10
      run: |
        echo "🧪 Running test suite with timeout protection..."
        dotnet test Brainarr.sln --configuration Release --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --results-directory TestResults/ \
          --blame-hang-timeout 5m \
          --blame-hang-dump-type mini
        echo "✅ Tests completed"
        
    - name: Package Plugin
      run: |
        mkdir -p release
        
        # Find and copy the main plugin DLL with proper error handling
        if [ -f "Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll" ]; then
          cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll release/
          BUILD_PATH="Brainarr.Plugin/bin/"
          echo "✅ Found plugin DLL at $BUILD_PATH"
        elif [ -f "Brainarr.Plugin/bin/Release/net6.0/Lidarr.Plugin.Brainarr.dll" ]; then
          cp Brainarr.Plugin/bin/Release/net6.0/Lidarr.Plugin.Brainarr.dll release/
          BUILD_PATH="Brainarr.Plugin/bin/Release/net6.0/"
          echo "✅ Found plugin DLL at $BUILD_PATH"
        else
          echo "❌ Could not find Lidarr.Plugin.Brainarr.dll"
          echo "Available files:"
          find . -name "*.dll" -path "*/bin/*" | head -10
          exit 1
        fi
        
        cp plugin.json release/
        
        # Copy dependencies (NuGet packages) from detected build path
        echo "📦 Copying dependencies from $BUILD_PATH..."
        cp "${BUILD_PATH}Newtonsoft.Json.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}NLog.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}FluentValidation.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}Microsoft.Extensions.Caching.Memory.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}Microsoft.Extensions.Caching.Abstractions.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}Microsoft.Extensions.DependencyInjection.Abstractions.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}Microsoft.Extensions.Logging.Abstractions.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}Microsoft.Extensions.Options.dll" release/ 2>/dev/null || true
        cp "${BUILD_PATH}Microsoft.Extensions.Primitives.dll" release/ 2>/dev/null || true
        
        echo "✅ Plugin packaging completed"
        echo "📦 Release package contents:"
        ls -la release/
        
        # Copy documentation
        cp README.md release/
        cp LICENSE release/
        cp CHANGELOG.md release/
        
        # Create installation guide
        cat > release/INSTALL.txt << 'EOF'
        # Brainarr Plugin Installation
        
        1. Stop Lidarr
        2. Copy all files to your Lidarr plugins directory:
           - Windows: %ProgramData%\Lidarr\plugins\
           - Linux: /var/lib/lidarr/plugins/
           - Docker: /config/plugins/
        3. Restart Lidarr
        4. Go to Settings > Import Lists > Add Brainarr
        5. Configure your preferred AI provider
        
        For detailed setup instructions, see README.md
        EOF
        
        # Create ZIP package
        cd release
        zip -r ../Brainarr-${{ steps.version.outputs.version }}.zip .
        cd ..
        
        # Create checksums
        sha256sum Brainarr-${{ steps.version.outputs.version }}.zip > Brainarr-${{ steps.version.outputs.version }}.zip.sha256
        
    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        echo "📝 Generating comprehensive release notes..."
        
        # Make script executable and run it
        chmod +x .github/scripts/generate-release-notes.sh
        ./.github/scripts/generate-release-notes.sh "${{ steps.version.outputs.version }}" "${{ steps.version.outputs.previous_tag }}"
        
        echo "✅ Release notes generated"
        
        # Output first few lines for verification
        echo "📄 Release notes preview:"
        head -10 release_notes.md
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: brainarr-plugin-${{ steps.version.outputs.version }}
        path: |
          Brainarr-${{ steps.version.outputs.version }}.zip
          Brainarr-${{ steps.version.outputs.version }}.zip.sha256
          release/
        retention-days: 90
        
    - name: 🎁 Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "🧠 Brainarr ${{ steps.version.outputs.version }} - AI-Powered Music Discovery"
        body_path: release_notes.md
        draft: ${{ github.event.inputs.draft == 'true' }}
        prerelease: ${{ steps.version.outputs.prerelease == 'true' }}
        files: |
          Brainarr-${{ steps.version.outputs.version }}.zip
          Brainarr-${{ steps.version.outputs.version }}.zip.sha256
        generate_release_notes: false  # We're providing our own comprehensive notes
        
    - name: 🎉 Release Summary  
      run: |
        echo "🎉 Successfully created release!"
        echo "📦 Release: Brainarr ${{ steps.version.outputs.version }}"
        echo "🔗 URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
        echo "📋 Prerelease: ${{ steps.version.outputs.prerelease }}"
        echo "💾 Assets: Brainarr-${{ steps.version.outputs.version }}.zip + SHA256"
        echo ""
        echo "📥 Installation command:"
        echo "GitHub URL: https://github.com/${{ github.repository }}"