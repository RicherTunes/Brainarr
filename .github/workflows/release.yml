name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'
        
    - name: Extract Lidarr assemblies from Docker for release
      run: |
        echo "🐳 Extracting Lidarr assemblies for release from plugins branch..."
        
        # Use plugins branch Docker image (same as CI)
        LIDARR_DOCKER_VERSION="pr-plugins-2.13.3.4692"
        
        # Pull plugins branch Docker image
        docker pull ghcr.io/hotio/lidarr:$LIDARR_DOCKER_VERSION
        docker create --name temp-lidarr ghcr.io/hotio/lidarr:$LIDARR_DOCKER_VERSION
        
        # Create output directory
        mkdir -p ext/Lidarr-docker/_output/net6.0
        
        # Extract required assemblies
        docker cp temp-lidarr:/app/bin/Lidarr.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Common.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Core.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Http.dll ext/Lidarr-docker/_output/net6.0/
        docker cp temp-lidarr:/app/bin/Lidarr.Api.V1.dll ext/Lidarr-docker/_output/net6.0/
        
        # Cleanup Docker container
        docker rm temp-lidarr
        
        echo "✅ Lidarr assemblies extracted successfully"
      
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Update version in project files
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        VERSION_NUM="${VERSION#v}"
        
        # Update plugin.json
        sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NUM\"/" plugin.json
        
        # Update project files
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION_NUM.0<\/AssemblyVersion>/" Brainarr.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION_NUM.0<\/FileVersion>/" Brainarr.csproj
        sed -i "s/<AssemblyInformationalVersion>.*<\/AssemblyInformationalVersion>/<AssemblyInformationalVersion>$VERSION_NUM<\/AssemblyInformationalVersion>/" Brainarr.csproj
        
    - name: Build Plugin
      run: |
        dotnet restore Brainarr.Plugin/
        dotnet build Brainarr.Plugin/ --configuration Release --no-restore -p:LidarrPath="${{ github.workspace }}/ext/Lidarr-docker/_output/net6.0"
        
    - name: Run Tests
      run: |
        dotnet test --configuration Release --verbosity minimal --collect:"XPlat Code Coverage"
        
    - name: Package Plugin
      run: |
        mkdir -p release
        
        # Copy main plugin files
        cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll release/
        cp plugin.json release/
        
        # Copy dependencies (NuGet packages)
        cp Brainarr.Plugin/bin/Newtonsoft.Json.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/NLog.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/FluentValidation.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/Microsoft.Extensions.Caching.Memory.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/Microsoft.Extensions.Caching.Abstractions.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/Microsoft.Extensions.DependencyInjection.Abstractions.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/Microsoft.Extensions.Logging.Abstractions.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/Microsoft.Extensions.Options.dll release/ 2>/dev/null || true
        cp Brainarr.Plugin/bin/Microsoft.Extensions.Primitives.dll release/ 2>/dev/null || true
        
        # Copy documentation
        cp README.md release/
        cp LICENSE release/
        cp CHANGELOG.md release/
        
        # Create installation guide
        cat > release/INSTALL.txt << 'EOF'
        # Brainarr Plugin Installation
        
        1. Stop Lidarr
        2. Copy all files to your Lidarr plugins directory:
           - Windows: %ProgramData%\Lidarr\plugins\
           - Linux: /var/lib/lidarr/plugins/
           - Docker: /config/plugins/
        3. Restart Lidarr
        4. Go to Settings > Import Lists > Add Brainarr
        5. Configure your preferred AI provider
        
        For detailed setup instructions, see README.md
        EOF
        
        # Create ZIP package
        cd release
        zip -r ../Brainarr-${{ steps.version.outputs.version }}.zip .
        cd ..
        
        # Create checksums
        sha256sum Brainarr-${{ steps.version.outputs.version }}.zip > Brainarr-${{ steps.version.outputs.version }}.zip.sha256
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Extract version notes from CHANGELOG.md
        if grep -q "## \[$VERSION" CHANGELOG.md; then
          sed -n "/## \[$VERSION/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
        else
          echo "## Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### What's New" >> release_notes.md
          echo "- Latest improvements and bug fixes" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Add installation instructions
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download \`Brainarr-$VERSION.zip\`" >> release_notes.md
        echo "2. Stop Lidarr" >> release_notes.md
        echo "3. Extract to your Lidarr plugins directory" >> release_notes.md
        echo "4. Restart Lidarr" >> release_notes.md
        echo "5. Configure in Settings > Import Lists" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Supported AI Providers" >> release_notes.md
        echo "- **Local**: Ollama, LM Studio (100% private)" >> release_notes.md
        echo "- **Cloud**: OpenAI, Anthropic, Perplexity, OpenRouter, DeepSeek, Gemini, Groq" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Verification" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Verify download integrity:" >> release_notes.md
        echo "sha256sum -c Brainarr-$VERSION.zip.sha256" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: brainarr-plugin-${{ steps.version.outputs.version }}
        path: |
          Brainarr-${{ steps.version.outputs.version }}.zip
          Brainarr-${{ steps.version.outputs.version }}.zip.sha256
          release/
        retention-days: 90
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Brainarr ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}
        files: |
          Brainarr-${{ steps.version.outputs.version }}.zip
          Brainarr-${{ steps.version.outputs.version }}.zip.sha256
        generate_release_notes: true