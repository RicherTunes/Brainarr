name: 🚀 Simple Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '6.0.x'
  # Keep aligned with CI default (see AGENTS.md CI Essentials)
  LIDARR_DOCKER_VERSION: 'pr-plugins-2.14.2.4786'

permissions:
  contents: write  # Required for creating releases

jobs:
  release:
    name: 📦 Build and Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.SUBMODULES_TOKEN || github.token }}

    - name: Get Version
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "📦 Building version: ${VERSION}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Read pinned plugins digest (if available)
      id: digest
      shell: bash
      run: |
        if [ -f .github/lidarr_digest.txt ]; then
          DIG=$(cat .github/lidarr_digest.txt | tr -d '\n')
          if [[ "$DIG" == sha256:* ]]; then
            echo "LIDARR_DOCKER_DIGEST=$DIG" >> "$GITHUB_ENV"
            echo "Using pinned digest: $DIG"
          fi
        fi

    - name: Extract Lidarr assemblies (plugins Docker)
      shell: bash
      run: |
        set -euo pipefail
        bash scripts/extract-lidarr-assemblies.sh --mode minimal --no-tar-fallback --output-dir ext/Lidarr-docker/_output/net6.0

    - name: Sanity check assemblies manifest
      shell: bash
      run: |
        set -euo pipefail
        MAN=ext/Lidarr-docker/_output/net6.0/MANIFEST.txt
        test -f "$MAN" || { echo "Missing MANIFEST.txt" >&2; exit 1; }
        echo "=== Assemblies MANIFEST (release-simple) ==="; sed -n '1,80p' "$MAN"
        if grep -q '^Fallback:\s*tarball' "$MAN"; then
          echo "Assemblies came from tarball fallback; expected Docker (plugins branch)." >&2
          exit 1
        fi
        EXPECT_TAG="ghcr.io/hotio/lidarr:${LIDARR_DOCKER_VERSION}"
        if [ -n "${LIDARR_DOCKER_DIGEST:-}" ]; then
          grep -q "^DockerDigestEnv: ${LIDARR_DOCKER_DIGEST}\b" "$MAN" || { echo "Manifest digest mismatch" >&2; exit 1; }
        else
          grep -q "^DockerTag: ${EXPECT_TAG}\b" "$MAN" || { echo "Manifest tag mismatch" >&2; exit 1; }
        fi

    - name: Build Plugin
      shell: bash
      run: |
        echo "🔨 Building Brainarr plugin..."
        dotnet restore Brainarr.sln
        dotnet build Brainarr.Plugin/Brainarr.Plugin.csproj --configuration Release --no-restore \
          -p:LidarrPath="${{ github.workspace }}/ext/Lidarr-docker/_output/net6.0"
        echo "✅ Build completed"

    - name: Create Release Package
      shell: bash
      run: |
        echo "📦 Creating release package..."

        # Create release directory
        mkdir -p release

        # Copy plugin files directly to the release root to avoid nested directories
        cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.dll release/
        cp Brainarr.Plugin/bin/Lidarr.Plugin.Brainarr.pdb release/ 2>/dev/null || true

        # Copy plugin manifest
        cp plugin.json release/

        # Copy dependencies if they exist
        for dll in Newtonsoft.Json NLog FluentValidation; do
          find Brainarr.Plugin/bin/ -name "${dll}.dll" -exec cp {} release/ \; 2>/dev/null || true
        done

        # Copy documentation
        cp README.md release/
        cp LICENSE release/

        # Create simple installation instructions
        cat > release/INSTALL.txt << 'EOF'
        Brainarr Plugin Installation
        ============================

        For Docker (Recommended):
        1. Use Hotio's Lidarr image: ghcr.io/hotio/lidarr:pr-plugins
        2. Ensure /config/plugins/RicherTunes/Brainarr/ exists
        3. Extract this archive's contents into /config/plugins/RicherTunes/Brainarr/
        4. Restart container

        For Native Installation:
        1. Switch Lidarr to "plugins" branch in Settings > General
        2. Ensure the following directory exists: RicherTunes/Brainarr inside your Lidarr plugins folder
        3. Extract this archive's contents into:
           - Windows: %ProgramData%\Lidarr\plugins\RicherTunes\Brainarr\
           - Linux: /var/lib/lidarr/plugins/RicherTunes/Brainarr/
           - macOS: ~/.config/Lidarr/plugins/RicherTunes/Brainarr/
        4. Restart Lidarr

        Configuration:
        1. Go to Settings > Import Lists
        2. Add "Brainarr AI Music Discovery"
        3. Configure your preferred AI provider

        Minimum Lidarr Version: 2.13.1.4681
        EOF

        # Create ZIP (following TypNull's naming pattern)
        cd release
        zip -r ../Brainarr-${{ steps.version.outputs.version }}.net6.0.zip .
        cd ..

        # Create checksum
        sha256sum Brainarr-${{ steps.version.outputs.version }}.net6.0.zip > Brainarr-${{ steps.version.outputs.version }}.net6.0.zip.sha256

        echo "✅ Package created: Brainarr-${{ steps.version.outputs.version }}.net6.0.zip"

    - name: Generate Release Notes
      id: notes
      shell: bash
      run: |
        cat > release_notes.md << 'EOF'
        ## 🧠 Brainarr ${{ steps.version.outputs.version }}

        AI-powered music discovery plugin for Lidarr with support for 8+ AI providers.

        ### 📦 Installation

        **Docker (Recommended):**
        ```yaml
        image: ghcr.io/hotio/lidarr:pr-plugins
        ```

        **Plugin URL:**
        ```
        https://github.com/${{ github.repository }}
        ```

        ### ✨ Features
        - 🤖 8 AI Providers (Ollama, OpenAI, Anthropic, Gemini, and more)
        - 🎯 Library-aware recommendations
        - 💾 Smart caching system
        - 🔄 Automatic provider failover
        - 🛡️ Enterprise-grade security

        ### 📋 Requirements
        - **Lidarr Version:** 2.13.1.4681 or higher (plugins branch)
        - **.NET Version:** net6.0
        - **Docker Image:** `ghcr.io/hotio/lidarr:pr-plugins`

        ### 🐛 Bug Reports
        Please report issues at: https://github.com/${{ github.repository }}/issues

        ### 📝 Changelog
        See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.

        ---
        *Built with ❤️ for the Lidarr community*
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Brainarr ${{ steps.version.outputs.version }}"
        body_path: release_notes.md
        files: |
          Brainarr-${{ steps.version.outputs.version }}.net6.0.zip
          Brainarr-${{ steps.version.outputs.version }}.net6.0.zip.sha256
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') }}

    - name: Summary
      shell: bash
      run: |
        echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** Brainarr-${{ steps.version.outputs.version }}.net6.0.zip" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download" >> $GITHUB_STEP_SUMMARY
        echo "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
