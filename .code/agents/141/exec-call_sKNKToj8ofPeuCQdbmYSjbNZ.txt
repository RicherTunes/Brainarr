
> Brainarr.Plugin\BrainarrSettings.cs:18:        private AI[7mProvider[0m _provider;
> Brainarr.Plugin\BrainarrSettings.cs:19:        private AI[7mProvider[0m? _previousProvider;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:20:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:21:        public BrainarrSettings()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:22:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:24:            _[7mprovider[0m = AIProvider.Ollama;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:25:            _ollamaUrl = BrainarrConstants.DefaultOllamaUrl;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:26:            _ollamaModel = BrainarrConstants.DefaultOllamaModel;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:27:            _lmStudioUrl = BrainarrConstants.DefaultLMStudioUrl;[0m
> Brainarr.Plugin\BrainarrSettings.cs:29:            [7mMaxRecommendations [0m[7m[0m= [0m
[7m[0mBrainarrConstants.DefaultRecommendations;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:30:            DiscoveryMode = DiscoveryMode.Adjacent;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:31:            SamplingStrategy = SamplingStrategy.Balanced;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:32:            RecommendationMode = RecommendationMode.SpecificAlbums;[0m
> Brainarr.Plugin\BrainarrSettings.cs:34:            // Default iterative refinement on for local default [7mprovider[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:35:            EnableIterativeRefinement = true;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:36:            BackfillStrategy = BackfillStrategy.Standard;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:37:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:40:        [FieldDefinition(0, Label = "AI [7mProvider[0m", [0m[7m[0mType [0m[7m[0m= [0m
[7m[0mFieldType.Select, [0m[7m[0mSelectOptions [0m[7m[0m= [0m[7m[0mtypeof(AIProvider),[0m
> Brainarr.Plugin\BrainarrSettings.cs:41:            HelpText = "Choose your AI [7mprovider[0m:\n- [0m[7m[0mLOCAL [0m[7m[0m(Private): [0m
[7m[0mOllama, [0m[7m[0mLM [0m[7m[0mStudio [0m[7m[0m- [0m[7m[0mYour [0m[7m[0mdata [0m[7m[0mstays [0m[7m[0mprivate\n- [0m[7m[0mGATEWAY: [0m[7m[0mOpenRouter [0m[7m[0m- [0m[7m[0mAccess [0m[7m[0m200+ [0m[7m[0mmodels [0m[7m[0mwith [0m[7m[0mone [0m[7m[0mkey\n- [0m[7m[0mBUDGET: [0m
[7m[0mDeepSeek, [0m[7m[0mGemini [0m[7m[0m- [0m[7m[0mLow [0m[7m[0mcost [0m[7m[0mor [0m[7m[0mfree\n- [0m[7m[0mFAST: [0m[7m[0mGroq [0m[7m[0m- [0m[7m[0mUltra-fast [0m[7m[0mresponses\n- [0m[7m[0mPREMIUM: [0m[7m[0mOpenAI, [0m[7m[0mAnthropic [0m[7m[0m- [0m[7m[0mBest [0m
[7m[0mquality\n\nNote: [0m[7m[0mAfter [0m[7m[0mselecting, [0m[7m[0mclick [0m[7m[0m'Test' [0m[7m[0mto [0m[7m[0mverify [0m[7m[0mconnection!", [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Provider-Basics#choosing-a-provider")][0m
> Brainarr.Plugin\BrainarrSettings.cs:42:        public AI[7mProvider[0m Provider[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:43:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:44:            get => _[7mprovider[0m;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:45:            set[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:46:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:47:                if (_[7mprovider[0m != value)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:48:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:49:                    _previous[7mProvider[0m = _provider;
> Brainarr.Plugin\BrainarrSettings.cs:50:                    _[7mprovider[0m = value;
> Brainarr.Plugin\BrainarrSettings.cs:51:                    // Don't clear any models - preserve settings for
each [7mprovider[0m
> Brainarr.Plugin\BrainarrSettings.cs:52:                    // Auto-enable iterative refinement for local
[7mprovider[0ms [0m[7m[0mfor [0m[7m[0mbetter [0m[7m[0mfill [0m[7m[0mbehavior[0m
> Brainarr.Plugin\BrainarrSettings.cs:53:                    if (_[7mprovider [0m[7m[0m== [0m[7m[0mAIProvider.Ollama [0m[7m[0m|| [0m[7m[0m_provider [0m[7m[0m== [0m
[7m[0mAIProvider.LMStudio)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:54:                    {[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:55:                        EnableIterativeRefinement = true;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:56:                    }[0m
> Brainarr.Plugin\BrainarrSettings.cs:57:                    // Ensure a stable default model when switching to
[7mprovider[0ms [0m[7m[0mwith [0m[7m[0mambiguous [0m[7m[0mdefaults[0m
> Brainarr.Plugin\BrainarrSettings.cs:58:                    if (_[7mprovider [0m[7m[0m== [0m[7m[0mAIProvider.OpenRouter [0m[7m[0m&& [0m
[7m[0mstring.IsNullOrWhiteSpace(OpenRouterModelId))[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:59:                    {[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:60: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mOpenRouterModelId [0m[7m[0m= [0m
[7m[0mBrainarrConstants.DefaultOpenRouterModel;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:61:                    }[0m
> Brainarr.Plugin\BrainarrSettings.cs:65:                    // Same [7mprovider[0m - treat as reset operation
> Brainarr.Plugin\BrainarrSettings.cs:66:                    ClearCurrent[7mProvider[0mModel();[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:67:                }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:68:            }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:69:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:78:            HelpText = "Only used for local [7mprovider[0ms [0m[7m[0m(Ollama/LM [0m
[7m[0mStudio). [0m[7m[0mFor [0m[7m[0mcloud/API-key [0m[7m[0mproviders [0m[7m[0m(OpenAI, [0m[7m[0mAnthropic, [0m[7m[0mPerplexity, [0m[7m[0mOpenRouter, [0m[7m[0mDeepSeek, [0m[7m[0mGemini, [0m[7m[0mGroq) [0m[7m[0mthis [0m
[7m[0mshows [0m[7m[0m'N/A' [0m[7m[0mand [0m[7m[0mis [0m[7m[0mignored.",[0m
> Brainarr.Plugin\BrainarrSettings.cs:79:            HelpLink =
"https://github.com/RicherTunes/Brainarr/wiki/[7mProvider[0m-Basics#configuration-url")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:80:        public string ConfigurationUrl[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:81:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:82:            get => [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:83:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:84:                AI[7mProvider[0m.Ollama [0m[7m[0m=> [0m[7m[0mstring.IsNullOrEmpty(_ollamaUrl) [0m[7m[0m? [0m
[7m[0mBrainarrConstants.DefaultOllamaUrl [0m[7m[0m: [0m[7m[0m_ollamaUrl,[0m
> Brainarr.Plugin\BrainarrSettings.cs:85:                AI[7mProvider[0m.LMStudio [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(_lmStudioUrl) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultLMStudioUrl [0m[7m[0m: [0m[7m[0m_lmStudioUrl,[0m
> Brainarr.Plugin\BrainarrSettings.cs:86:                _ => "N/A - API Key based [7mprovider[0m"[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:87:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:88:            set[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:89:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:90:                if ([7mProvider[0m == AIProvider.Ollama) _ollamaUrl = value;
> Brainarr.Plugin\BrainarrSettings.cs:91:                else if ([7mProvider [0m[7m[0m== [0m[7m[0mAIProvider.LMStudio) [0m[7m[0m_lmStudioUrl [0m[7m[0m= [0m
[7m[0mvalue;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:92:            }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:93:        }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:94:[0m
> Brainarr.Plugin\BrainarrSettings.cs:95:        [FieldDefinition(2, Label = "Model Selection", Type =
FieldType.Select, SelectOptions[7mProvider[0mAction [0m[7m[0m= [0m[7m[0m"getModelOptions",[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:96: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpText [0m[7m[0m= [0m[7m[0m"IMPORTANT: [0m[7m[0mClick [0m[7m[0m'Test' [0m[7m[0mfirst [0m[7m[0mto [0m[7m[0mauto-detect [0m
[7m[0mavailable [0m[7m[0mmodels!", [0m[7m[0mHelpLink [0m[7m[0m= [0m[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Advanced-Settings#model-selection")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:97:        public string ModelSelection[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:98:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:101:                return [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:102:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:103:                    AI[7mProvider[0m.Ollama [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(_ollamaModel) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultOllamaModel [0m[7m[0m: [0m[7m[0m_ollamaModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:104:                    AI[7mProvider[0m.LMStudio [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(_lmStudioModel) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultLMStudioModel [0m[7m[0m: [0m[7m[0m_lmStudioModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:105:                    AI[7mProvider[0m.Perplexity [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(PerplexityModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultPerplexityModel [0m[7m[0m: [0m[7m[0mPerplexityModelId,[0m
> Brainarr.Plugin\BrainarrSettings.cs:106:                    AI[7mProvider[0m.OpenAI [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(OpenAIModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultOpenAIModel [0m[7m[0m: [0m[7m[0mOpenAIModelId,[0m
> Brainarr.Plugin\BrainarrSettings.cs:107:                    AI[7mProvider[0m.Anthropic [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(AnthropicModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultAnthropicModel [0m[7m[0m: [0m[7m[0mAnthropicModelId,[0m
> Brainarr.Plugin\BrainarrSettings.cs:108:                    AI[7mProvider[0m.OpenRouter [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(OpenRouterModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultOpenRouterModel [0m[7m[0m: [0m[7m[0mOpenRouterModelId,[0m
> Brainarr.Plugin\BrainarrSettings.cs:109:                    AI[7mProvider[0m.DeepSeek [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(DeepSeekModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultDeepSeekModel [0m[7m[0m: [0m[7m[0mDeepSeekModelId,[0m
> Brainarr.Plugin\BrainarrSettings.cs:110:                    AI[7mProvider[0m.Gemini [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(GeminiModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultGeminiModel [0m[7m[0m: [0m[7m[0mGeminiModelId,[0m
> Brainarr.Plugin\BrainarrSettings.cs:111:                    AI[7mProvider[0m.Groq [0m[7m[0m=> [0m
[7m[0mstring.IsNullOrEmpty(GroqModelId) [0m[7m[0m? [0m[7m[0mBrainarrConstants.DefaultGroqModel [0m[7m[0m: [0m[7m[0mGroqModelId,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:112:                    _ => "Default"[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:113:                };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:114:            }[0m
> Brainarr.Plugin\BrainarrSettings.cs:117:                // Guard against stale UI value being applied to a
newly-switched [7mprovider[0m.[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:118: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m// [0m[7m[0mExample: [0m[7m[0mswitched [0m[7m[0mfrom [0m[7m[0mPerplexity [0m[7m[0m-> [0m[7m[0mLM [0m[7m[0mStudio, [0m[7m[0mbut [0m
[7m[0mUI [0m[7m[0mstill [0m[7m[0mposts [0m[7m[0m"sonar-large".[0m
> Brainarr.Plugin\BrainarrSettings.cs:119:                if ([7mProvider [0m[7m[0m== [0m[7m[0mAIProvider.LMStudio [0m[7m[0m&& [0m
[7m[0mIsPerplexityModelValue(value))[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:120:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:121:                    // Treat as selection for Perplexity (previous
[7mprovider[0m) [0m[7m[0mand [0m[7m[0mignore [0m[7m[0mfor [0m[7m[0mLM [0m[7m[0mStudio[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:122:                    PerplexityModelId = value;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:123:                    return;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:124:                }[0m
> Brainarr.Plugin\BrainarrSettings.cs:125:                if ([7mProvider [0m[7m[0m== [0m[7m[0mAIProvider.Perplexity [0m[7m[0m&& [0m
[7m[0mLooksLikeLocalModelValue(value))[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:126:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:127:                    // Treat as selection for LM Studio/Ollama
depending on previous [7mprovider[0m
> Brainarr.Plugin\BrainarrSettings.cs:128:                    if (_previous[7mProvider[0m == AIProvider.Ollama)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:129:                    {[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:130:                        _ollamaModel = value;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:131:                    }[0m
> Brainarr.Plugin\BrainarrSettings.cs:139:                switch ([7mProvider[0m)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:140:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:141:                    case AI[7mProvider[0m.Ollama: _ollamaModel = value; break;
> Brainarr.Plugin\BrainarrSettings.cs:142:                    case AI[7mProvider[0m.LMStudio: [0m[7m[0m_lmStudioModel [0m[7m[0m= [0m[7m[0mvalue; [0m
[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:143:                    case AI[7mProvider[0m.Perplexity: [0m[7m[0mPerplexityModelId [0m[7m[0m= [0m
[7m[0mvalue; [0m[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:144:                    case AI[7mProvider[0m.OpenAI: [0m[7m[0mOpenAIModelId [0m[7m[0m= [0m[7m[0mvalue; [0m
[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:145:                    case AI[7mProvider[0m.Anthropic: [0m[7m[0mAnthropicModelId [0m[7m[0m= [0m
[7m[0mvalue; [0m[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:146:                    case AI[7mProvider[0m.OpenRouter: [0m[7m[0mOpenRouterModelId [0m[7m[0m= [0m
[7m[0mvalue; [0m[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:147:                    case AI[7mProvider[0m.DeepSeek: [0m[7m[0mDeepSeekModelId [0m[7m[0m= [0m[7m[0mvalue; [0m
[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:148:                    case AI[7mProvider[0m.Gemini: [0m[7m[0mGeminiModelId [0m[7m[0m= [0m[7m[0mvalue; [0m
[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:149:                    case AI[7mProvider[0m.Groq: GroqModelId = value; break;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:150:                }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:151:            }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:152:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:157:        // Advanced: manual model override for cloud [7mprovider[0ms[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:158: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(23, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Manual [0m[7m[0mModel [0m[7m[0mID [0m[7m[0m(override)", [0m[7m[0mType [0m
[7m[0m= [0m[7m[0mFieldType.Textbox, [0m[7m[0mAdvanced [0m[7m[0m= [0m[7m[0mtrue, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
> Brainarr.Plugin\BrainarrSettings.cs:159:            HelpText = "Optional: exact API model ID to use for cloud
[7mprovider[0ms [0m[7m[0m(e.g., [0m[7m[0mopenai/gpt-4o, [0m[7m[0manthropic/claude-3.5-sonnet, [0m[7m[0mqwen/qwen-2.5-72b-instruct). [0m[7m[0mIf [0m[7m[0mset, [0m[7m[0mthis [0m[7m[0moverrides [0m
[7m[0mthe [0m[7m[0mselection [0m[7m[0mabove.",[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:160: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Advanced-Settings#manual-model-override")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:161:        public string? ManualModelId { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:162:[0m
> Brainarr.Plugin\BrainarrSettings.cs:165:            HelpText = "Controls Claude extended thinking.\n- Off:
Never enable thinking\n- Auto: Enable for Anthropic [7mprovider[0m; [0m[7m[0mfor [0m[7m[0mOpenRouter [0m[7m[0mauto-switches [0m[7m[0mto [0m[7m[0m:thinking [0m[7m[0mvariant [0m
[7m[0mon [0m[7m[0mAnthropic [0m[7m[0mroutes\n- [0m[7m[0mOn: [0m[7m[0mForce [0m[7m[0menable [0m[7m[0m(same [0m[7m[0mas [0m[7m[0mAuto [0m[7m[0mfor [0m[7m[0mnow).\nNote: [0m[7m[0mWith [0m[7m[0mAuto/On, [0m[7m[0mOpenRouter [0m[7m[0mAnthropic [0m[7m[0mmodels [0m
[7m[0muse [0m[7m[0m':thinking' [0m[7m[0mautomatically; [0m[7m[0mdirect [0m[7m[0mAnthropic [0m[7m[0madds [0m[7m[0m'thinking' [0m[7m[0mwith [0m[7m[0moptional [0m[7m[0m'budget_tokens' [0m[7m[0m(see [0m[7m[0mnext [0m[7m[0mfield).",[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:166:            HelpLink = "https://docs.anthropic.com/")][0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:167: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mpublic [0m[7m[0mThinkingMode [0m[7m[0mThinkingMode [0m[7m[0m{ [0m[7m[0mget; [0m[7m[0mset; [0m[7m[0m} [0m[7m[0m= [0m
[7m[0mThinkingMode.Off;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:168:[0m
> Brainarr.Plugin\BrainarrSettings.cs:175:            HelpText = "Enter your API key for the selected [7mprovider[0m. [0m
[7m[0mNot [0m[7m[0mneeded [0m[7m[0mfor [0m[7m[0mlocal [0m[7m[0mproviders [0m[7m[0m(Ollama/LM [0m[7m[0mStudio)",[0m
> Brainarr.Plugin\BrainarrSettings.cs:176:            HelpLink =
"https://github.com/RicherTunes/Brainarr/wiki/[7mProvider[0m-Basics#api-keys")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:177:        public string ApiKey[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:178:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:179:            get => [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:180:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:181:                AI[7mProvider[0m.Perplexity => PerplexityApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:182:                AI[7mProvider[0m.OpenAI => OpenAIApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:183:                AI[7mProvider[0m.Anthropic => AnthropicApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:184:                AI[7mProvider[0m.OpenRouter => OpenRouterApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:185:                AI[7mProvider[0m.DeepSeek => DeepSeekApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:186:                AI[7mProvider[0m.Gemini => GeminiApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:187:                AI[7mProvider[0m.Groq => GroqApiKey,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:188:                _ => null[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:189:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:190:            set[0m
> Brainarr.Plugin\BrainarrSettings.cs:192:                switch ([7mProvider[0m)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:193:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:194:                    case AI[7mProvider[0m.Perplexity: [0m[7m[0mPerplexityApiKey [0m[7m[0m= [0m
[7m[0mvalue; [0m[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:195:                    case AI[7mProvider[0m.OpenAI: OpenAIApiKey = value; break;
> Brainarr.Plugin\BrainarrSettings.cs:196:                    case AI[7mProvider[0m.Anthropic: [0m[7m[0mAnthropicApiKey [0m[7m[0m= [0m[7m[0mvalue; [0m
[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:197:                    case AI[7mProvider[0m.OpenRouter: [0m[7m[0mOpenRouterApiKey [0m[7m[0m= [0m
[7m[0mvalue; [0m[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:198:                    case AI[7mProvider[0m.DeepSeek: [0m[7m[0mDeepSeekApiKey [0m[7m[0m= [0m[7m[0mvalue; [0m
[7m[0mbreak;[0m
> Brainarr.Plugin\BrainarrSettings.cs:199:                    case AI[7mProvider[0m.Gemini: GeminiApiKey = value; break;
> Brainarr.Plugin\BrainarrSettings.cs:200:                    case AI[7mProvider[0m.Groq: GroqApiKey = value; break;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:201:                }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:202:            }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:203:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:205:        // Hidden backing fields for all [7mprovider[0ms[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:206:        public string OllamaUrl[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:207:        {[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:208: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mget [0m[7m[0m=> [0m[7m[0mstring.IsNullOrEmpty(_ollamaUrl) [0m[7m[0m? [0m
[7m[0mBrainarrConstants.DefaultOllamaUrl [0m[7m[0m: [0m[7m[0m_ollamaUrl;[0m
> Brainarr.Plugin\BrainarrSettings.cs:236:        // Hidden backing properties for all API-based [7mprovider[0ms[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:237: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m// [0m[7m[0mSECURITY: [0m[7m[0mAPI [0m[7m[0mkeys [0m[7m[0mare [0m[7m[0mstored [0m[7m[0mas [0m[7m[0mstrings [0m[7m[0mand [0m[7m[0monly [0m[7m[0mmarked [0m[7m[0mas [0m
[7m[0mPassword [0m[7m[0min [0m[7m[0mUI [0m[7m[0mfields.[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:238: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m// [0m[7m[0mDo [0m[7m[0mnot [0m[7m[0mlog [0m[7m[0mthese [0m[7m[0mvalues; [0m[7m[0mconsider [0m[7m[0mexternal [0m[7m[0msecret [0m[7m[0mstorage [0m[7m[0mif [0m
[7m[0mneeded.[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:239:        private string? _perplexityApiKey;[0m
> Brainarr.Plugin\BrainarrSettings.cs:252:        // New canonical model id properties per [7mprovider[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:253:        public string? PerplexityModelId { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:254:        // Backward-compat aliases for tests and legacy code[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:255: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mpublic [0m[7m[0mstring? [0m[7m[0mPerplexityModel [0m[7m[0m{ [0m[7m[0mget [0m[7m[0m=> [0m[7m[0mPerplexityModelId; [0m[7m[0mset [0m
[7m[0m=> [0m[7m[0mPerplexityModelId [0m[7m[0m= [0m[7m[0mvalue; [0m[7m[0m}[0m
> Brainarr.Plugin\BrainarrSettings.cs:301:        // Auto-detect model (show for all [7mprovider[0ms)[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:302: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(4, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Auto-Detect [0m[7m[0mModel", [0m[7m[0mType [0m[7m[0m= [0m
[7m[0mFieldType.Checkbox, [0m[7m[0mHelpText [0m[7m[0m= [0m[7m[0m"Automatically [0m[7m[0mdetect [0m[7m[0mand [0m[7m[0mselect [0m[7m[0mbest [0m[7m[0mavailable [0m[7m[0mmodel", [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Advanced-Settings#auto-detect-model")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:303:        public bool AutoDetectModel { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:304:[0m
> Brainarr.Plugin\BrainarrSettings.cs:308:        public int [7mMaxRecommendations[0m { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:309:[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:310: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(6, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Discovery [0m[7m[0mMode", [0m[7m[0mType [0m[7m[0m= [0m
[7m[0mFieldType.Select, [0m[7m[0mSelectOptions [0m[7m[0m= [0m[7m[0mtypeof(DiscoveryMode),[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:311: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpText [0m[7m[0m= [0m[7m[0m"How [0m[7m[0madventurous [0m[7m[0mshould [0m[7m[0mrecommendations [0m[7m[0mbe?\n- [0m
[7m[0mSimilar: [0m[7m[0mStay [0m[7m[0mclose [0m[7m[0mto [0m[7m[0mcurrent [0m[7m[0mtaste\n- [0m[7m[0mAdjacent: [0m[7m[0mExplore [0m[7m[0mrelated [0m[7m[0mgenres\n- [0m[7m[0mExploratory: [0m[7m[0mDiscover [0m[7m[0mnew [0m[7m[0mgenres",[0m
> Brainarr.Plugin\BrainarrSettings.cs:336:            get => [7mProvider [0m[7m[0m== [0m[7m[0mAIProvider.Ollama [0m[7m[0m? [0m[7m[0mOllamaUrl [0m[7m[0m: [0m
[7m[0mLMStudioUrl;[0m
> Brainarr.Plugin\BrainarrSettings.cs:337:            set { /* Handled by [7mprovider[0m-specific URLs */ }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:338:        }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:339:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:340:        // Model Detection Results (populated during test)[0m
> Brainarr.Plugin\BrainarrSettings.cs:356:                    HelpText = "If under target, request additional
recommendations with feedback to fill the gap.\nFor local [7mprovider[0ms [0m[7m[0m(Ollama/LM [0m[7m[0mStudio) [0m[7m[0mthis [0m[7m[0mruns [0m[7m[0mby [0m[7m[0mdefault.",[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:357: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Advanced-Settings#iterative-top-up")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:358:        public bool EnableIterativeRefinement { get; set; } = false;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:359:[0m
> Brainarr.Plugin\BrainarrSettings.cs:377:            HelpText = "Cooldown (milliseconds) on early stop to reduce
churn (local [7mprovider[0ms).",[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:378: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Advanced-Settings#hysteresis-controls")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:379:        public int IterativeCooldownMs { get; set; } = 1000;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:380:[0m
> Brainarr.Plugin\BrainarrSettings.cs:388:        // Request timeout for AI [7mprovider[0m calls (seconds)[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:389: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(26, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"AI [0m[7m[0mRequest [0m[7m[0mTimeout [0m[7m[0m(s)", [0m[7m[0mType [0m[7m[0m= [0m
[7m[0mFieldType.Number,[0m
> Brainarr.Plugin\BrainarrSettings.cs:390:            HelpText = "Timeout for [7mprovider [0m[7m[0mrequests [0m[7m[0min [0m[7m[0mseconds. [0m
[7m[0mIncrease [0m[7m[0mfor [0m[7m[0mslow [0m[7m[0mlocal [0m[7m[0mLLMs.\nNote: [0m[7m[0mFor [0m[7m[0mOllama/LM [0m[7m[0mStudio, [0m[7m[0mBrainarr [0m[7m[0muses [0m[7m[0m360s [0m[7m[0mif [0m[7m[0mthis [0m[7m[0mis [0m[7m[0mset [0m[7m[0mnear [0m[7m[0mdefault [0m
[7m[0m(�30s).",[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:391: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Advanced-Settings#timeouts")][0m
> Brainarr.Plugin\BrainarrSettings.cs:392:        public int [7mAIRequestTimeoutSeconds [0m[7m[0m{ [0m[7m[0mget; [0m[7m[0mset; [0m[7m[0m} [0m[7m[0m= [0m
[7m[0mBrainarrConstants.DefaultAITimeout;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:393:[0m
> Brainarr.Plugin\BrainarrSettings.cs:394:        // OpenAI-compatible [7mprovider[0ms[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:395: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(30, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Prefer [0m[7m[0mStructured [0m[7m[0mJSON [0m[7m[0m(schema)", [0m
[7m[0mType [0m[7m[0m= [0m[7m[0mFieldType.Checkbox, [0m[7m[0mAdvanced [0m[7m[0m= [0m[7m[0mtrue, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:396: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpText [0m[7m[0m= [0m[7m[0m"Use [0m[7m[0mJSON [0m[7m[0mSchema [0m[7m[0mstructured [0m[7m[0mresponses [0m[7m[0mwhen [0m
[7m[0msupported [0m[7m[0m(OpenAI/OpenRouter/Groq/DeepSeek/Perplexity). [0m[7m[0mDisable [0m[7m[0mif [0m[7m[0myour [0m[7m[0mgateway [0m[7m[0mhas [0m[7m[0missues [0m[7m[0mwith [0m[7m[0mstructured [0m
[7m[0moutputs.")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:397:        public bool PreferStructuredJsonForChat { get; set; } = true;[0m
> Brainarr.Plugin\BrainarrSettings.cs:428:            HelpText = "Override default concurrency per model for
cloud [7mprovider[0ms [0m[7m[0m(OpenAI/Anthropic/OpenRouter/Groq/Perplexity/DeepSeek/Gemini). [0m[7m[0mLeave [0m[7m[0mblank [0m[7m[0mto [0m[7m[0muse [0m[7m[0mdefaults.")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:429:        public int? MaxConcurrentPerModelCloud { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:430:[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:431: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(27, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Max [0m[7m[0mConcurrent [0m[7m[0mPer [0m[7m[0mModel [0m
[7m[0m(Local)", [0m[7m[0mType [0m[7m[0m= [0m[7m[0mFieldType.Number, [0m[7m[0mAdvanced [0m[7m[0m= [0m[7m[0mtrue, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
> Brainarr.Plugin\BrainarrSettings.cs:432:            HelpText = "Override default concurrency per model for
local [7mprovider[0ms [0m[7m[0m(Ollama/LM [0m[7m[0mStudio). [0m[7m[0mLeave [0m[7m[0mblank [0m[7m[0mto [0m[7m[0muse [0m[7m[0mdefaults.")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:433:        public int? MaxConcurrentPerModelLocal { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:434:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:435:        // Advanced: Adaptive throttling (429) controls (hidden)[0m
> Brainarr.Plugin\BrainarrSettings.cs:445:            HelpText = "Temporary per-model concurrency cap for cloud
[7mprovider[0ms [0m[7m[0mafter [0m[7m[0m429. [0m[7m[0mDefault [0m[7m[0m2.")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:446:        public int? AdaptiveThrottleCloudCap { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:447:[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:448: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(27, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Adaptive [0m[7m[0mThrottle [0m[7m[0mCap [0m[7m[0m(Local)", [0m
[7m[0mType [0m[7m[0m= [0m[7m[0mFieldType.Number, [0m[7m[0mAdvanced [0m[7m[0m= [0m[7m[0mtrue, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
> Brainarr.Plugin\BrainarrSettings.cs:449:            HelpText = "Temporary per-model concurrency cap for local
[7mprovider[0ms [0m[7m[0mafter [0m[7m[0m429. [0m[7m[0mDefault [0m[7m[0m8.")][0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:450:        public int? AdaptiveThrottleLocalCap { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:451:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:452:        // Safety Gates[0m
> Brainarr.Plugin\BrainarrSettings.cs:476:        // Use TagSelect (multi-select with chips) to show options from
the [7mprovider[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:477: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(15, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Approve [0m[7m[0mSuggestions", [0m[7m[0mType [0m[7m[0m= [0m
[7m[0mFieldType.TagSelect, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:478: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpText [0m[7m[0m= [0m[7m[0m"Pick [0m[7m[0mitems [0m[7m[0mfrom [0m[7m[0myour [0m[7m[0mReview [0m[7m[0mQueue [0m[7m[0mto [0m
[7m[0mapprove.\n [0m[7m[0mSave [0m[7m[0mto [0m[7m[0mapply [0m[7m[0mon [0m[7m[0mthe [0m[7m[0mnext [0m[7m[0msync [0m[7m[0m(or [0m[7m[0muse [0m[7m[0mthe [0m[7m[0m'review/apply' [0m[7m[0maction [0m[7m[0mto [0m[7m[0mapply [0m[7m[0mimmediately).\n [0m[7m[0mAfter [0m[7m[0ma [0m
[7m[0msuccessful [0m[7m[0mapply, [0m[7m[0mselections [0m[7m[0mauto[0m[7m[0mclear [0m[7m[0mand [0m[7m[0mare [0m[7m[0mpersisted [0m[7m[0mwhen [0m[7m[0msupported [0m[7m[0mby [0m[7m[0myour [0m[7m[0mhost.",[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:479: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpLink [0m[7m[0m= [0m
[7m[0m"https://github.com/RicherTunes/Brainarr/wiki/Review-Queue",[0m
> Brainarr.Plugin\BrainarrSettings.cs:482:                    SelectOptions[7mProvider[0mAction = "review/getoptions")][0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:483: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mpublic [0m[7m[0mIEnumerable<string> [0m[7m[0mReviewApproveKeys [0m[7m[0m{ [0m[7m[0mget; [0m[7m[0mset; [0m[7m[0m} [0m[7m[0m= [0m
[7m[0mArray.Empty<string>();[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:484:[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:485: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(16, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Review [0m[7m[0mSummary", [0m[7m[0mType [0m[7m[0m= [0m
[7m[0mFieldType.TagSelect, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
> Brainarr.Plugin\BrainarrSettings.cs:490:                    SelectOptions[7mProvider[0mAction [0m[7m[0m= [0m
[7m[0m"review/getsummaryoptions")][0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:491: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mpublic [0m[7m[0mIEnumerable<string> [0m[7m[0mReviewSummary [0m[7m[0m{ [0m[7m[0mget; [0m[7m[0mset; [0m[7m[0m} [0m[7m[0m= [0m
[7m[0mArray.Empty<string>();[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:492:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:493:        // Observability (hidden preview)[0m
> Brainarr.Plugin\BrainarrSettings.cs:495:                    HelpText = "Compact preview of [7mprovider[0m/model [0m
[7m[0mlatency, [0m[7m[0merrors [0m[7m[0mand [0m[7m[0mthrottles.",[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:496:                    HelpLink = "observability/html",[0m
> Brainarr.Plugin\BrainarrSettings.cs:497:                    Placeholder = "[7mprovider[0m:model [0m[7m[0m- [0m[7m[0mp95, [0m[7m[0merrors, [0m[7m[0m429 [0m
[7m[0m(last [0m[7m[0m15m)",[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:498:                    Section = "Observability",[0m
> Brainarr.Plugin\BrainarrSettings.cs:499:                    SelectOptions[7mProvider[0mAction [0m[7m[0m= [0m
[7m[0m"observability/getoptions")][0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:500: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mpublic [0m[7m[0mIEnumerable<string> [0m[7m[0mObservabilityPreview [0m[7m[0m{ [0m[7m[0mget; [0m[7m[0mset; [0m[7m[0m} [0m[7m[0m= [0m
[7m[0mArray.Empty<string>();[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:501:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:502:        // Default filters for preview (hidden)[0m
> Brainarr.Plugin\BrainarrSettings.cs:503:        [FieldDefinition(32, Label = "Observability [7mProvider [0m[7m[0mFilter", [0m
[7m[0mType [0m[7m[0m= [0m[7m[0mFieldType.Textbox, [0m[7m[0mAdvanced [0m[7m[0m= [0m[7m[0mtrue, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
> Brainarr.Plugin\BrainarrSettings.cs:504:                    HelpText = "Optional default [7mprovider [0m[7m[0mfilter [0m[7m[0mfor [0m
[7m[0mObservability [0m[7m[0mpreview [0m[7m[0m(e.g., [0m[7m[0m'openai', [0m[7m[0m'ollama').")][0m
> Brainarr.Plugin\BrainarrSettings.cs:505:        public string Observability[7mProvider[0mFilter { get; set; }[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:506:[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:507: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0m[FieldDefinition(33, [0m[7m[0mLabel [0m[7m[0m= [0m[7m[0m"Observability [0m[7m[0mModel [0m[7m[0mFilter", [0m[7m[0mType [0m
[7m[0m= [0m[7m[0mFieldType.Textbox, [0m[7m[0mAdvanced [0m[7m[0m= [0m[7m[0mtrue, [0m[7m[0mHidden [0m[7m[0m= [0m[7m[0mHiddenType.Hidden,[0m
[7m [0m[7m [0m[7m[0mBrainarr.Plugin\BrainarrSettings.cs:508: [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m [0m[7m[0mHelpText [0m[7m[0m= [0m[7m[0m"Optional [0m[7m[0mdefault [0m[7m[0mmodel [0m[7m[0mfilter [0m[7m[0mfor [0m
[7m[0mObservability [0m[7m[0mpreview [0m[7m[0m(e.g., [0m[7m[0m'gpt-4o-mini').")][0m
> Brainarr.Plugin\BrainarrSettings.cs:539:        /// Gets [7mprovider[0m-specific settings for configuration.[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:540:        /// </summary>[0m
> Brainarr.Plugin\BrainarrSettings.cs:541:        public Dictionary<string, object>
Get[7mProvider[0mSettings(AIProvider [0m[7m[0mprovider)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:542:        {[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:543:            var settings = new Dictionary<string, object>();[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:544:[0m
> Brainarr.Plugin\BrainarrSettings.cs:545:            switch ([7mprovider[0m)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:546:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:547:                case AI[7mProvider[0m.Ollama:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:548:                    settings["url"] = OllamaUrl;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:549:                    settings["model"] = OllamaModel;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:550:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:551:                case AI[7mProvider[0m.LMStudio:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:552:                    settings["url"] = LMStudioUrl;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:553:                    settings["model"] = LMStudioModel;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:554:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:555:                case AI[7mProvider[0m.OpenAI:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:556:                    settings["apiKey"] = OpenAIApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:557:                    settings["model"] = OpenAIModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:558:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:559:                case AI[7mProvider[0m.Anthropic:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:560:                    settings["apiKey"] = AnthropicApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:561:                    settings["model"] = AnthropicModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:562:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:563:                case AI[7mProvider[0m.Perplexity:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:564:                    settings["apiKey"] = PerplexityApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:565:                    settings["model"] = PerplexityModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:566:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:567:                case AI[7mProvider[0m.OpenRouter:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:568:                    settings["apiKey"] = OpenRouterApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:569:                    settings["model"] = OpenRouterModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:570:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:571:                case AI[7mProvider[0m.DeepSeek:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:572:                    settings["apiKey"] = DeepSeekApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:573:                    settings["model"] = DeepSeekModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:574:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:575:                case AI[7mProvider[0m.Gemini:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:576:                    settings["apiKey"] = GeminiApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:577:                    settings["model"] = GeminiModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:578:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:579:                case AI[7mProvider[0m.Groq:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:580:                    settings["apiKey"] = GroqApiKey;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:581:                    settings["model"] = GroqModelId;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:582:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:590:        /// Gets the default model for a specific [7mprovider[0m.[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:591:        /// </summary>[0m
> Brainarr.Plugin\BrainarrSettings.cs:592:        private string? GetCurrent[7mProvider[0mModel()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:593:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:594:            return [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:595:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:596:                AI[7mProvider[0m.Ollama => _ollamaModel,
> Brainarr.Plugin\BrainarrSettings.cs:597:                AI[7mProvider[0m.LMStudio => _lmStudioModel,
> Brainarr.Plugin\BrainarrSettings.cs:598:                AI[7mProvider[0m.Perplexity => PerplexityModelId,
> Brainarr.Plugin\BrainarrSettings.cs:599:                AI[7mProvider[0m.OpenAI => OpenAIModelId,
> Brainarr.Plugin\BrainarrSettings.cs:600:                AI[7mProvider[0m.Anthropic => AnthropicModelId,
> Brainarr.Plugin\BrainarrSettings.cs:601:                AI[7mProvider[0m.OpenRouter => OpenRouterModelId,
> Brainarr.Plugin\BrainarrSettings.cs:602:                AI[7mProvider[0m.DeepSeek => DeepSeekModelId,
> Brainarr.Plugin\BrainarrSettings.cs:603:                AI[7mProvider[0m.Gemini => GeminiModelId,
> Brainarr.Plugin\BrainarrSettings.cs:604:                AI[7mProvider[0m.Groq => GroqModelId,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:605:                _ => null[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:606:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:607:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:609:        private void ClearCurrent[7mProvider[0mModel()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:610:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:611:            // Clear the model for the current [7mprovider [0m[7m[0mto [0m[7m[0mreset [0m[7m[0mto [0m
[7m[0mdefault[0m
> Brainarr.Plugin\BrainarrSettings.cs:612:            switch (_[7mprovider[0m)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:613:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:614:                case AI[7mProvider[0m.Ollama:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:615:                    _ollamaModel = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:616:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:617:                case AI[7mProvider[0m.LMStudio:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:618:                    _lmStudioModel = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:619:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:620:                case AI[7mProvider[0m.Perplexity:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:621:                    PerplexityModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:622:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:623:                case AI[7mProvider[0m.OpenAI:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:624:                    OpenAIModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:625:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:626:                case AI[7mProvider[0m.Anthropic:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:627:                    AnthropicModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:628:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:629:                case AI[7mProvider[0m.OpenRouter:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:630:                    OpenRouterModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:631:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:632:                case AI[7mProvider[0m.DeepSeek:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:633:                    DeepSeekModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:634:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:635:                case AI[7mProvider[0m.Gemini:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:636:                    GeminiModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:637:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:638:                case AI[7mProvider[0m.Groq:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:639:                    GroqModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:640:                    break;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:641:            }[0m
> Brainarr.Plugin\BrainarrSettings.cs:644:        private void ClearPrevious[7mProvider[0mModel()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:645:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:646:            // Clear the model for the previous [7mprovider [0m[7m[0mwhen [0m[7m[0mswitching [0m
[7m[0maway[0m
> Brainarr.Plugin\BrainarrSettings.cs:647:            if (_previous[7mProvider[0m.HasValue)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:648:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:649:                switch (_previous[7mProvider[0m.Value)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:650:                {[0m
> Brainarr.Plugin\BrainarrSettings.cs:651:                    case AI[7mProvider[0m.Ollama:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:652:                        _ollamaModel = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:653:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:654:                    case AI[7mProvider[0m.LMStudio:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:655:                        _lmStudioModel = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:656:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:657:                    case AI[7mProvider[0m.Perplexity:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:658:                        PerplexityModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:659:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:660:                    case AI[7mProvider[0m.OpenAI:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:661:                        OpenAIModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:662:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:663:                    case AI[7mProvider[0m.Anthropic:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:664:                        AnthropicModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:665:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:666:                    case AI[7mProvider[0m.OpenRouter:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:667:                        OpenRouterModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:668:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:669:                    case AI[7mProvider[0m.DeepSeek:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:670:                        DeepSeekModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:671:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:672:                    case AI[7mProvider[0m.Gemini:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:673:                        GeminiModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:674:                        break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:675:                    case AI[7mProvider[0m.Groq:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:676:                        GroqModelId = null;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:677:                        break;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:678:                }[0m
> Brainarr.Plugin\BrainarrSettings.cs:682:        private string GetDefaultModelFor[7mProvider[0m(AIProvider provider)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:683:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:684:            return [7mprovider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:685:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:686:                AI[7mProvider[0m.Ollama [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultOllamaModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:687:                AI[7mProvider[0m.LMStudio [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultLMStudioModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:688:                AI[7mProvider[0m.Perplexity [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultPerplexityModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:689:                AI[7mProvider[0m.OpenAI [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultOpenAIModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:690:                AI[7mProvider[0m.Anthropic [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultAnthropicModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:691:                AI[7mProvider[0m.OpenRouter [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultOpenRouterModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:692:                AI[7mProvider[0m.DeepSeek [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultDeepSeekModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:693:                AI[7mProvider[0m.Gemini [0m[7m[0m=> [0m
[7m[0mBrainarrConstants.DefaultGeminiModel,[0m
> Brainarr.Plugin\BrainarrSettings.cs:694:                AI[7mProvider[0m.Groq => BrainarrConstants.DefaultGroqModel,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:695:                _ => "Default"[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:696:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:697:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:699:        // Polymorphic methods to get/set [7mprovider[0m-specific [0m
[7m[0mconfiguration[0m
> Brainarr.Plugin\BrainarrSettings.cs:700:        public string? GetModelFor[7mProvider[0m()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:701:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:702:            return [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:703:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:704:                AI[7mProvider[0m.Ollama => OllamaModel,
> Brainarr.Plugin\BrainarrSettings.cs:705:                AI[7mProvider[0m.LMStudio => LMStudioModel,
> Brainarr.Plugin\BrainarrSettings.cs:706:                AI[7mProvider[0m.OpenAI => OpenAIModelId,
> Brainarr.Plugin\BrainarrSettings.cs:707:                AI[7mProvider[0m.Anthropic => AnthropicModelId,
> Brainarr.Plugin\BrainarrSettings.cs:708:                AI[7mProvider[0m.Perplexity => PerplexityModelId,
> Brainarr.Plugin\BrainarrSettings.cs:709:                AI[7mProvider[0m.OpenRouter => OpenRouterModelId,
> Brainarr.Plugin\BrainarrSettings.cs:710:                AI[7mProvider[0m.DeepSeek => DeepSeekModelId,
> Brainarr.Plugin\BrainarrSettings.cs:711:                AI[7mProvider[0m.Gemini => GeminiModelId,
> Brainarr.Plugin\BrainarrSettings.cs:712:                AI[7mProvider[0m.Groq => GroqModelId,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:713:                _ => null[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:714:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:715:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:717:        public void SetModelFor[7mProvider[0m(string? model)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:718:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:719:            switch ([7mProvider[0m)[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:720:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:721:                case AI[7mProvider[0m.Ollama:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:722:                    OllamaModel = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:723:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:724:                case AI[7mProvider[0m.LMStudio:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:725:                    LMStudioModel = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:726:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:727:                case AI[7mProvider[0m.OpenAI:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:728:                    OpenAIModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:729:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:730:                case AI[7mProvider[0m.Anthropic:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:731:                    AnthropicModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:732:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:733:                case AI[7mProvider[0m.Perplexity:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:734:                    PerplexityModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:735:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:736:                case AI[7mProvider[0m.OpenRouter:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:737:                    OpenRouterModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:738:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:739:                case AI[7mProvider[0m.DeepSeek:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:740:                    DeepSeekModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:741:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:742:                case AI[7mProvider[0m.Gemini:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:743:                    GeminiModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:744:                    break;[0m
> Brainarr.Plugin\BrainarrSettings.cs:745:                case AI[7mProvider[0m.Groq:[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:746:                    GroqModelId = model;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:747:                    break;[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:748:            }[0m
> Brainarr.Plugin\BrainarrSettings.cs:751:        public string? GetApiKeyFor[7mProvider[0m()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:752:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:753:            return [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:754:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:755:                AI[7mProvider[0m.OpenAI => OpenAIApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:756:                AI[7mProvider[0m.Anthropic => AnthropicApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:757:                AI[7mProvider[0m.Perplexity => PerplexityApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:758:                AI[7mProvider[0m.OpenRouter => OpenRouterApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:759:                AI[7mProvider[0m.DeepSeek => DeepSeekApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:760:                AI[7mProvider[0m.Gemini => GeminiApiKey,
> Brainarr.Plugin\BrainarrSettings.cs:761:                AI[7mProvider[0m.Groq => GroqApiKey,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:762:                _ => null[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:763:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:764:        }[0m
> Brainarr.Plugin\BrainarrSettings.cs:766:        public string? GetBaseUrlFor[7mProvider[0m()[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:767:        {[0m
> Brainarr.Plugin\BrainarrSettings.cs:768:            return [7mProvider[0m switch[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:769:            {[0m
> Brainarr.Plugin\BrainarrSettings.cs:770:                AI[7mProvider[0m.Ollama => OllamaUrl,
> Brainarr.Plugin\BrainarrSettings.cs:771:                AI[7mProvider[0m.LMStudio => LMStudioUrl,[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:772:                _ => null[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:773:            };[0m
[7m[0m  Brainarr.Plugin\BrainarrSettings.cs:774:        }[0m
